//
//  FormWorker.swift
//  Santander-Test
//
//  Created by Matheus Ribeiro on 14/05/19.
//  Copyright (c) 2019 Matheus Ribeiro. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class FormWorker {
    
    func getFormCells(completion: @escaping ([FormCell]?, Error?) -> Void) {
        let apiManager = FundsServiceApiManager.shared
        apiManager.getFormCells { (formCells, error) in
            
            guard error == nil else {
                completion(nil, error)
                return
            }
            
            guard let formCells = formCells else {
                let domain = "Ocorreu um erro inesperado!"
                let responseError = NSError(domain: domain, code: 200, userInfo: nil)
                completion(nil, responseError)
                return
            }
            
            completion(formCells, nil)
        }
    }
    
    func validateField(text: String, typeField: TypeField) -> Bool {
        switch typeField {
        case .email:
            return FieldValidation.isValid(email: text)
        case .telNumber:
            return FieldValidation.isValid(phoneNumber: text)
        case .text:
            return FieldValidation.isValid(text: text)
        }
    }
    
    func validateAllFields(
        displayedFormCells: [Form.GetFormCells.ViewModel.DisplayViewModel],
        tableView: UITableView,
        completion: (Bool, IndexPath?, String?) -> Void) {
        
        var response: Bool = true
        var responseIndexPath: IndexPath?
        var responseMessage: String?
        
        for count in 0..<displayedFormCells.count {
            let displayedFormCell = displayedFormCells[count]
            guard displayedFormCell.type == .field else { continue }
            
            let indexPath = IndexPath(row: count, section: 0)
            if let cell = tableView.cellForRow(at: indexPath) as? FieldCell {
                guard let typeField = cell.viewModel?.typeField else { return }
                let text = cell.textField.text ?? ""
                let isValid = validateField(text: text, typeField: typeField)
                
                if !isValid {
                    switch typeField {
                    case .text:
                        responseMessage = "Preencha com seu nome"
                    case .email:
                        responseMessage = "Insira um e-mail válido"
                    case .telNumber:
                        responseMessage = "Número de telefone deve ser (##) #####-#### ou (##) ####-####"
                    }
                    response = false
                    responseIndexPath = indexPath
                    break
                }
            }
        }
        if response {
            completion(true, nil, nil)
        } else {
            completion(false, responseIndexPath, responseMessage)
        }
    }
}
