//
//  FundDetailViewController.swift
//  Santander-Test
//
//  Created by Matheus Ribeiro on 16/05/19.
//  Copyright (c) 2019 Matheus Ribeiro. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FundDetailDisplayLogic: class {
//    func displaySomething(viewModel: FundDetail.Something.ViewModel)
}

class FundDetailViewController: UIViewController, FundDetailDisplayLogic {
    
    @IBOutlet weak var tableView: UITableView!
    
    var interactor: FundDetailBusinessLogic?
    var router: (NSObjectProtocol & FundDetailRoutingLogic & FundDetailDataPassing)?
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    private func setup() {
        let viewController = self
        let interactor = FundDetailInteractor()
        let presenter = FundDetailPresenter()
        let router = FundDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupTableView()
    }
    
    private func setupTableView() {
        registerTableViewCells()
    }
    
    private func registerTableViewCells() {
        let fundHeader = UINib(nibName: "FundHeader", bundle: nil)
        tableView.register(
            fundHeader,
            forCellReuseIdentifier: FundHeader.reuseIdentifier
        )
        
        let fundRisk = UINib(nibName: "FundRisk", bundle: nil)
        tableView.register(
            fundRisk,
            forCellReuseIdentifier: FundRisk.reuseIdentifier
        )
        
        let fundMoreInfoCell = UINib(nibName: "FundMoreInfoCell", bundle: nil)
        tableView.register(
            fundMoreInfoCell,
            forCellReuseIdentifier: FundMoreInfoCell.reuseIdentifier
        )
        
        let fundInfoCell = UINib(nibName: "FundInfoCell", bundle: nil)
        tableView.register(
            fundInfoCell,
            forCellReuseIdentifier: FundInfoCell.reuseIdentifier
        )
        
        let fundDownInfoCell = UINib(nibName: "FundDownInfoCell", bundle: nil)
        tableView.register(
            fundDownInfoCell,
            forCellReuseIdentifier: FundDownInfoCell.reuseIdentifier
        )
        
        let sendCell = UINib(nibName: "SendCell", bundle: nil)
        tableView.register(
            sendCell,
            forCellReuseIdentifier: SendCell.reuseIdentifier
        )
    }
}

extension FundDetailViewController: UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 6
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch section {
        case 0, 1, 2:
            return 1
        case 3:
            return 5
        case 4:
            return 5
        case 5:
            return 1
        default:
            return 0
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.section {
        case 0:
            let cell = tableView.dequeueReusableCell(withIdentifier: FundHeader.reuseIdentifier) as! FundHeader
            return cell
        case 1:
            let cell = tableView.dequeueReusableCell(withIdentifier: FundRisk.reuseIdentifier) as! FundRisk
            return cell
        case 2:
            let cell = tableView.dequeueReusableCell(withIdentifier: FundMoreInfoCell.reuseIdentifier) as! FundMoreInfoCell
            return cell
        case 3:
            let cell = tableView.dequeueReusableCell(withIdentifier: FundInfoCell.reuseIdentifier) as! FundInfoCell
            return cell
        case 4:
            let cell = tableView.dequeueReusableCell(withIdentifier: FundDownInfoCell.reuseIdentifier) as! FundDownInfoCell
            return cell
        case 5:
            let cell = tableView.dequeueReusableCell(withIdentifier: SendCell.reuseIdentifier) as! SendCell
            // TODO
            cell.viewModel = SendCell.ViewModel(message: "Investir", topSpace: 45)
            return cell
        default:
            return UITableViewCell()
        }
    }
}
