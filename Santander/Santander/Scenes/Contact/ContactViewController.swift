//
//  ContactViewController.swift
//  Santander
//
//  Created by Gabriel vieira on 4/22/18.
//  Copyright (c) 2018 Gabriel vieira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ContactDisplayLogic: class
{
  func displayForm(viewModel: Contact.fetchFormCells.ViewModel)
}

class ContactViewController: BaseViewController, ContactDisplayLogic
{
  var interactor: ContactBusinessLogic?
  var router: (NSObjectProtocol & ContactRoutingLogic & ContactDataPassing)?
    var scrollView: UIScrollView = UIScrollView()
    var scrollContainerView: UIView = UIView()
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ContactInteractor()
    let presenter = ContactPresenter()
    let router = ContactRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    fetchFormCells()
//    self.view.backgroundColor = .green
  }
  
  // MARK: Do something
  
    func configUI(viewModel: Contact.fetchFormCells.ViewModel) {
        
        self.view.addSubview(self.scrollView)
        self.scrollView.snp.makeConstraints({ (make) in
            make.left.right.top.bottom.equalTo(0)
        })
        
        self.scrollView.addSubview(self.scrollContainerView)
        
        self.scrollContainerView.snp.makeConstraints { (make) in
            make.left.right.top.bottom.equalTo(0)
            make.width.equalTo(self.view)
            make.height.equalTo(1500)
        }
        
        let screenTitleLabel = UILabel()
        screenTitleLabel.font = UIFont.DINPro_Medium(ofSize: 16)
        screenTitleLabel.textColor = Color.black
        screenTitleLabel.text = "Contato"
        
        self.scrollContainerView.addSubview(screenTitleLabel)
        screenTitleLabel.snp.makeConstraints { (make) in
            make.centerX.equalTo(self.scrollContainerView)
            make.height.equalTo(22)
            make.top.equalTo(self.scrollContainerView).offset(24)
        }
        
        var lastItemReference: UIView = screenTitleLabel
        
        for item in viewModel.displayCells {
            
//            item.topSpacing = 35
            let topSpacing = 20
            
            let type = FieldType.init(rawValue: item.type)!
            
            if type == .text {
                let field = UILabel()
                field.font = UIFont.DINPro_Medium(ofSize: 16)
                field.textColor = Color.gray
                field.text = item.message
                field.adjustsFontSizeToFitWidth = true
                field.minimumScaleFactor = 0.5
                
                self.scrollContainerView.addSubview(field)
                field.snp.makeConstraints { (make) in
                    make.top.equalTo(lastItemReference.snp.bottom).offset(topSpacing)
                    make.height.equalTo(20)
                    make.left.equalTo(25)
                    make.right.equalTo(-25)
                }
                
                lastItemReference = field
            }
            
            if type == .field {
                let field = CustomTextField(frame: CGRect.zero)
                field.setLabelText(text: item.message)
                
                self.scrollContainerView.addSubview(field)
                field.snp.makeConstraints { (make) in
                    make.top.equalTo(lastItemReference.snp.bottom).offset(topSpacing)
                    make.height.equalTo(56)
                    make.left.equalTo(25)
                    make.right.equalTo(-25)
                }
            
                lastItemReference = field
            }
            
            if type == .checkbox {
                
                let field = CustomCheckBox(frame: CGRect.zero)
                field.setText(text: item.message)
                
                self.scrollContainerView.addSubview(field)
                field.snp.makeConstraints { (make) in
                    make.top.equalTo(lastItemReference.snp.bottom).offset(47)
                    make.height.equalTo(20)
                    make.left.equalTo(25)
                    make.right.equalTo(-25)
                }
                
                lastItemReference = field
            }
            
            if type == .send {
                
                let field = RoundedButton(frame: CGRect.zero)
                field.setTitle(item.message, for: .normal)
                
                self.scrollContainerView.addSubview(field)
                field.snp.makeConstraints { (make) in
                    make.top.equalTo(lastItemReference.snp.bottom).offset(38)
                    make.height.equalTo(50)
                    make.left.equalTo(25)
                    make.right.equalTo(-25)
                }
                
                lastItemReference = field
            }
        }
    }
  //@IBOutlet weak var nameTextField: UITextField!
  
  func fetchFormCells()
  {
    self.showLoader()
    let request = Contact.fetchFormCells.Request()
    interactor?.fetchFormCells(request: request)
  }
  
  func displayForm(viewModel: Contact.fetchFormCells.ViewModel)
  {
    self.hideLoader()
    self.configUI(viewModel: viewModel)
    //nameTextField.text = viewModel.name
  }
}
