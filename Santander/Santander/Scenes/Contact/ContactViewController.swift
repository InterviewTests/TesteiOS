//
//  ContactViewController.swift
//  Santander
//
//  Created by Orlando Amorim on 11/08/19.
//  Copyright (c) 2019 Santander. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Eureka
import JGProgressHUD

protocol ContactDisplayLogic: class {
    func displayForm(_ form: ContactForm)
    func displayError(_ error: Error)
    func displaySuccess()
}

class ContactViewController: SantanderBaseFormViewController {

    var interactor: ContactBusinessLogic?
    var router: (NSObjectProtocol & ContactRoutingLogic & ContactDataPassing)?
    var sendFormRequest = ContactFormDataRequest(name: nil, email: nil, phone: nil)
    
    private let progressHud: JGProgressHUD = {
        let progressHud = JGProgressHUD(style: .light)
        progressHud.textLabel.text = "Carregando..."
        return progressHud
    }()

    private var sendButton: SantanderButton = {
        var button = SantanderButton()
        button.setTitle("Enviar", for: .normal)
        return button
    }()
    
    private var successView: SuccessView = {
        var view = SuccessView()
        view.alpha = 0.0
        view.isUserInteractionEnabled = true
        return view
    }()
    
    private var isResetingForm: Bool = false
    
    // MARK: Object lifecycle
    override init() {
        super.init()
        setup()
    }

    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = ContactInteractor()
        let presenter = ContactPresenter()
        let router = ContactRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        getForm()
    }
    
    // MARK: Setup View
    private func setupView() {
        tableView.keyboardDismissMode = .interactive
        addSuccssView()
        setupSuccessView()
    }
    
    private func addSuccssView() {
        view.addSubview(successView)
        successView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
    }

    private func setupSuccessView() {        
        successView.onTap { [weak self] in
            guard let self = self else {
                return
            }
            self.dismissSuccessView()
        }
    }
    
    func getForm() {
        progressHud.show(in: view)
        interactor?.getForm()
    }
    
    func sendForm() {
        guard form.validate(includeHidden: false, includeDisabled: false).isEmpty else {
            return
        }
        tableView.endEditing(true)
        progressHud.show(in: view)
        let requestData = Contact.Form.Request(sendFormData: sendFormRequest)
        interactor?.sendForm(data: requestData)
    }
}

extension ContactViewController: ContactDisplayLogic {
    
    func displayForm(_ form: ContactForm) {
        progressHud.dismiss()
        self.form.removeAll()
        let rows = form.cells.compactMap({ makeRow(with: $0) })
        makeSection(rows: rows)
    }
    
    func displayError(_ error: Error) {
        progressHud.dismiss()
        showAlert(title: "Atenção", message: error.localizedDescription)
    }
    
    func displaySuccess() {
        isResetingForm = true
        form.rows.forEach({ $0.baseValue = nil })
        form.rows.forEach({ $0.reload() })
        form.cleanValidationErrors()
        isResetingForm = false
        
        progressHud.dismiss()
        presentSuccessView()
    }
}

// MARK: Factory
extension ContactViewController {
    
    private func makeRow(with cell: FormCell) -> BaseRow? {
        switch cell.type {
        case .field:
            if let fieldType = cell.fieldType {
                switch fieldType {
                case .text:
                    return makeNameRow(tag: cell.id, title: cell.message, isHidden: cell.isHidden, isRequired: cell.isRequired, topSpacing: cell.topSpacing)
                case .phone:
                    return makePhoneRow(tag: cell.id, title: cell.message, isHidden: cell.isHidden, isRequired: cell.isRequired, topSpacing: cell.topSpacing)
                case .email:
                    return makeEmailRow(tag: cell.id, title: cell.message, isHidden: cell.isHidden, isRequired: cell.isRequired, topSpacing: cell.topSpacing)
                }
            }
        case .text:
            return nil
        case .image:
            return nil
        case .checkbox:
            return makeCheckboxRow(tag: cell.id, title: cell.message, isHidden: cell.isHidden, isRequired: cell.isRequired, topSpacing: cell.topSpacing, fieldToPresent: cell.fieldToPresent)
        case .send:
            return makeSendButtonRow(tag: cell.id, title: cell.message, isHidden: cell.isHidden, isRequired: cell.isRequired, topSpacing: cell.topSpacing)
        }
        return nil
    }
    
    private func makeNameRow(tag: Int, title: String, isHidden: Bool, isRequired: Bool, topSpacing: CGFloat) -> BaseRow {
        let row = TextFloatLabelRow(tag: String(tag))
        row.title = title
        row.hidden = Condition(booleanLiteral: isHidden)
        row.cell.topSpacing = topSpacing
        if isRequired {
            row.add(rule: RuleRequired())
        }
        row.validationOptions = .validatesAlways

        row.onRowValidationChanged { [weak self] cell, row in
            guard let self = self, !self.isResetingForm else {
                return
            }
            cell.floatLabelTextField.borderColor = row.isValid ? UIColor.Santander.sushi : UIColor.Santander.torchRed
        }
        
        row.onChange { [weak self] row in
            guard let self = self else {
                return
            }
            self.sendFormRequest.name = row.value
            
            if row.value == nil {
                row.cell.floatLabelTextField.borderColor = UIColor.Santander.gallery
            }
        }
        return row
    }
    
    private func makeEmailRow(tag: Int, title: String, isHidden: Bool, isRequired: Bool, topSpacing: CGFloat) -> BaseRow {
        let row = EmailFloatLabelRow(tag: String(tag))
        row.title = title
        row.hidden = Condition(booleanLiteral: isHidden)
        row.cell.topSpacing = topSpacing
        if isRequired {
            row.add(rule: RuleRequired())
        }
        row.add(rule: RuleEmail())
        row.validationOptions = .validatesAlways
        
        row.onRowValidationChanged { [weak self] cell, row in
            guard let self = self, !self.isResetingForm else {
                return
            }
            cell.floatLabelTextField.borderColor = row.isValid ? UIColor.Santander.sushi : UIColor.Santander.torchRed
        }
        
        
        row.onChange { [weak self] row in
            guard let self = self else {
                return
            }
            self.sendFormRequest.email = row.value
            
            if row.value == nil {
                row.cell.floatLabelTextField.borderColor = UIColor.Santander.gallery
            }
        }
        return row
    }
    
    private func makePhoneRow(tag: Int, title: String, isHidden: Bool, isRequired: Bool, topSpacing: CGFloat) -> BaseRow {
        let row = PhoneFloatLabelRow(tag: String(tag))
        row.title = title
        row.hidden = Condition(booleanLiteral: isHidden)
        row.cell.topSpacing = topSpacing
        if isRequired {
            row.add(rule: RuleRequired())
        }
        row.add(rule: RulePhoneNumber())
        row.validationOptions = .validatesAlways

        row.onRowValidationChanged { [weak self] cell, row in
            guard let self = self, !self.isResetingForm else {
                return
            }
            cell.floatLabelTextField.borderColor = row.isValid ? UIColor.Santander.sushi : UIColor.Santander.torchRed
        }
        
        row.onChange { [weak self] row in
            guard let self = self else {
                return
            }
            self.sendFormRequest.phone = row.value
            
            if row.value == nil {
                row.cell.floatLabelTextField.borderColor = UIColor.Santander.gallery
            }
        }
        return row
    }
    
    private func makeCheckboxRow(tag: Int, title: String, isHidden: Bool, isRequired: Bool, topSpacing: CGFloat, fieldToPresent: Int? = nil) -> BaseRow {
        let row = ViewRow<CheckmarkButton>(tag: String(tag))
        var state: CheckmarkButton.State = .unselected
        if let fieldToPresent = fieldToPresent, let row = self.form.rowBy(tag: String(fieldToPresent)) {
            state = row.isHidden ? .unselected : .selected
        }
        
        let checkmarkButton = CheckmarkButton(text: title, state: state, frame: CGRect(x: 0, y: 0, width: view.frame.width, height: 21.0))
        checkmarkButton.onTap { [weak self] state in
            guard let fieldToPresent = fieldToPresent, let self = self, let row = self.form.rowBy(tag: String(fieldToPresent)) else {
                return
            }
            let isHidden = state == .unselected
            let condition = Condition(booleanLiteral: isHidden)
            row.hidden = condition
            row.validationOptions = .validatesOnDemand
            row.baseValue = nil
            row.evaluateHidden()
            row.validationOptions = .validatesAlways
        }
        
        row.cellSetup { cell, row in
            cell.view = checkmarkButton
            
            cell.viewTopMargin = topSpacing
            cell.viewLeftMargin = 40.0
            cell.viewRightMargin = 40.0
            cell.viewBottomMargin = 0.0
        }
        
        return row
    }
    
    private func makeSendButtonRow(tag: Int, title: String, isHidden: Bool, isRequired: Bool, topSpacing: CGFloat) -> BaseRow {
        let row = ViewRow<SantanderButton>(tag: String(tag))
        row.value = "Enviar"

        let sendButton = SantanderButton(title: "Enviar", frame: CGRect(x: 0, y: 0, width: view.frame.width, height: 50.0))

        row.cellSetup { cell, row in
            cell.view = sendButton
            cell.viewTopMargin = topSpacing
            cell.viewLeftMargin = 30.0
            cell.viewRightMargin = 30.0
            cell.viewBottomMargin = 0.0
        }
        
        sendButton.onTap { [weak self] button in
            guard let self = self else {
                return
            }
            row.section?.form?.validate()
            self.sendForm()
        }
        
        return row
    }
}

extension ContactViewController {
    private func presentSuccessView() {
        UIView.animate(withDuration: 0.2, animations: { [weak self] in
            guard let self = self else { return }
            self.tableView.alpha = 0.0
            self.successView.alpha = 1.0
        })
    }
    
    private func dismissSuccessView() {
        UIView.animate(withDuration: 0.2, animations: { [weak self] in
            guard let self = self else { return }
            self.tableView.alpha = 1.0
            self.successView.alpha = 0.0
        })
    }
}
