//
//  ContactInteractor.swift
//  Santander
//
//  Created by Orlando Amorim on 11/08/19.
//  Copyright (c) 2019 Santander. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol ContactBusinessLogic {
    func getForm()
    func sendForm(data: Contact.Form.Request)
}

protocol ContactDataStore {
  
}

class ContactInteractor: ContactBusinessLogic, ContactDataStore {

    var presenter: ContactPresentationLogic?
    var worker: ContactWorker = ContactWorker(contactStore: ContactAPI())

    // MARK: Get Form
    func getForm() {
        worker.getForm { [weak self] result in
            guard let self = self, let presenter = self.presenter else {
                return
            }
            switch result {
            case .success(let contactForm):
                let response = Contact.Form.Response(result: .success(contactForm))
                presenter.presentForm(response: response)
            case .failure(let error):
                let response = Contact.Form.Response(result: .failure(error))
                presenter.presentForm(response: response)
            }
        }
    }
    
    // MARK: Send Form
    func sendForm(data: Contact.Form.Request) {
        DispatchQueue.main.asyncAfter(deadline: .now() + 3) { [weak self] in
            guard let self = self, let presenter = self.presenter else {
                return
            }
            presenter.presentSuccess()
        }
    }
}
