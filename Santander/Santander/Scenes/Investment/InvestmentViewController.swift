//
//  InvestmentViewController.swift
//  Santander
//
//  Created by Orlando Amorim on 15/08/19.
//  Copyright (c) 2019 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Eureka
import JGProgressHUD
import SafariServices

protocol InvestmentDisplayLogic: class {
    func presentScreen(viewModel: Investment.Funds.ViewModel)
}

class InvestmentViewController: SantanderBaseFormViewController, InvestmentDisplayLogic {
    
    private let progressHud: JGProgressHUD = {
        let progressHud = JGProgressHUD(style: .light)
        progressHud.textLabel.text = "Carregando..."
        return progressHud
    }()
    
    var interactor: InvestmentBusinessLogic?
    var router: (NSObjectProtocol & InvestmentRoutingLogic & InvestmentDataPassing)?

    // MARK: Object lifecycle
    override init() {
        super.init()
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = InvestmentInteractor()
        let presenter = InvestmentPresenter()
        let router = InvestmentRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        getFunds()
    }

    func getFunds() {
        progressHud.show(in: view)
        interactor?.getFunds()
    }
    
    func presentScreen(viewModel: Investment.Funds.ViewModel) {
        progressHud.dismiss()
        switch viewModel.result {
        case .success(let screen):
            form.removeAll()
            var rows: [BaseRow] = []
            rows.append(makeFundNameRow(title: screen.title, name: screen.fundName))
            rows.append(makeSeparatorArrowLineRow())
            rows.append(makeWhatIsRow(title: screen.whatIs, detail: screen.definition))
            rows.append(makeRiskViewRow(title: screen.riskTitle, risk: screen.risk))
            rows.append(makeMoreInfoTitleRow(title: screen.infoTitle))
            rows.append(makeMoreInfoPercentagesViewRow(moreInfo: screen.moreInfo))
            rows.append(makeSeparatorLineRow())
            
            screen.info.forEach { info in
                rows.append(makeMoreInfoRow(title: info.name, value: info.data))
            }
            screen.downInfo.forEach { downInfo in
                rows.append(makeMoreInfoDownloadRow(title: downInfo.name))
            }
            rows.append(makeInvestButtonRow())
            // Make the section
            makeSection(rows: rows)
        case .failure(let error):
            showAlert(title: "Atenção", message: error.localizedDescription)
        }
    }
}

// MARK: Factory
extension InvestmentViewController {
    
    private func makeFundNameRow(title: String, name: String) -> BaseRow {
        let labelRow = TitleSubtitleRow()
        labelRow.title = title
        labelRow.value = name
        
        labelRow.cellUpdate { cell, row in
            cell.titleLabel.font = UIFont.santander(type: .medium, with: 14.0)
            cell.titleLabel.textAlignment = .center
            cell.titleLabel.textColor = UIColor.Santander.gray
            cell.titleLabel.numberOfLines = 0
            
            cell.subtitleLabel.font = UIFont.santander(type: .medium, with: 28.0)
            cell.subtitleLabel.textAlignment = .center
            cell.subtitleLabel.textColor = UIColor.Santander.mineShaft
            cell.subtitleLabel.numberOfLines = 0
        }
        return labelRow
    }
    
    private func makeSeparatorArrowLineRow() -> BaseRow {
        let row = ViewRow<UIImageView>()
        let separatorLineImageView = UIImageView(image: UIImage(named: "separator-line-arrow-icon"))
        
        row.cellSetup { cell, row in
            cell.view = separatorLineImageView
            cell.viewTopMargin = 21.0
            cell.viewLeftMargin = 30.0
            cell.viewRightMargin = 30.0
            cell.viewBottomMargin = 14.0
        }
        return row
    }
    
    private func makeWhatIsRow(title: String, detail: String) -> BaseRow {
        let labelRow = TitleSubtitleRow()
        labelRow.title = title
        labelRow.value = detail
        
        labelRow.cellUpdate { cell, row in
            cell.titleLabel.font = UIFont.santander(type: .medium, with: 16.0)
            cell.titleLabel.textAlignment = .center
            cell.titleLabel.textColor = UIColor.Santander.gray
            cell.titleLabel.numberOfLines = 0
            
            cell.subtitleLabel.font = UIFont.santander(type: .light, with: 16.0)
            cell.subtitleLabel.textAlignment = .center
            cell.subtitleLabel.textColor = UIColor.Santander.gray
            cell.subtitleLabel.numberOfLines = 0
        }
        return labelRow
    }
    
    private func makeRiskViewRow(title: String, risk: FundsScreen.Risk) -> BaseRow {
        let row = ViewRow<FundRiskView>()
        let fundRiskView = FundRiskView(text: title, risk: risk, frame: CGRect(x: 0, y: 0, width: view.frame.width - 38.0 - 38.0, height: 77.0))
        
        row.cellSetup { cell, row in
            cell.view = fundRiskView
            cell.viewTopMargin = 35.0
            cell.viewLeftMargin = 38.0
            cell.viewRightMargin = 38.0
            cell.viewBottomMargin = 46.0
        }
        return row
    }
    
    private func makeMoreInfoTitleRow(title: String) -> BaseRow {
        let labelRow = LabelRow()
        labelRow.title = title
        
        labelRow.cellSetup { (cell, row) in
            guard let textLabel = cell.textLabel else {
                return
            }
            textLabel.snp.makeConstraints({ make in
                make.top.bottom.equalToSuperview()
                make.leading.trailing.equalToSuperview().inset(34.0)
            })
        }
        
        labelRow.cellUpdate { cell, row in
            guard let textLabel = cell.textLabel else {
                return
            }
            textLabel.font = UIFont.santander(type: .medium, with: 16.0)
            textLabel.textAlignment = .center
            textLabel.textColor = UIColor.Santander.gray
            textLabel.numberOfLines = 0
        }
        return labelRow
    }
    
    private func makeMoreInfoPercentagesViewRow(moreInfo: FundsScreen.MoreInfo) -> BaseRow {
        let row = ViewRow<MoreInfoPercentagesView>()
        let moreInfoView = MoreInfoPercentagesView(moreInfo: moreInfo, frame: CGRect(x: 0, y: 0, width: view.frame.width - 30.0 - 30.0, height: 130.0))
        
        row.cellSetup { cell, row in
            cell.view = moreInfoView
            cell.viewTopMargin = 19.0
            cell.viewLeftMargin = 30.0
            cell.viewRightMargin = 30.0
            cell.viewBottomMargin = 0.0
        }
        return row
    }
    
    private func makeSeparatorLineRow() -> BaseRow {
        let row = ViewRow<UIView>()
        let separatorLineView = UIView(frame: CGRect(x: 0, y: 0, width: view.frame.width - 30.0 - 30.0, height: 1.0))
        separatorLineView.backgroundColor = UIColor.Santander.cloudy.withAlphaComponent(0.2)
        
        row.cellSetup { cell, row in
            cell.view = separatorLineView
            cell.viewTopMargin = 21.0
            cell.viewLeftMargin = 30.0
            cell.viewRightMargin = 30.0
            cell.viewBottomMargin = 17.0
        }
        return row
    }
    
    private func makeMoreInfoRow(title: String, value: String) -> BaseRow {
        let row = MoreInfoRow()
        row.title = title
        row.value = value
        return row
    }
    
    private func makeMoreInfoDownloadRow(title: String) -> BaseRow {
        let row = DownloadInfoRow<String>()
        row.title = title
        
        row.cell.downloadButton.onTap { [weak self] in
            guard let self = self, let url = URL(string: "https://www.google.com") else {
                return
            }
            let safariViewController = SFSafariViewController(url: url)
            //            safariVC.delegate = self
            self.present(safariViewController, animated: true, completion: nil)
        }
        
        row.onDonwloadButtonTap { [weak self] in
            guard let self = self, let url = URL(string: "https://www.google.com") else {
                return
            }
            let safariViewController = SFSafariViewController(url: url)
            self.present(safariViewController, animated: true, completion: nil)
        }
        
        return row
    }
    
    private func makeInvestButtonRow() -> BaseRow {
        let row = ViewRow<SantanderButton>()
        let sendButton = SantanderButton(title: "Investir", frame: CGRect(x: 0, y: 0, width: view.frame.width, height: 50.0))
        
        row.cellSetup { cell, row in
            cell.view = sendButton
            cell.viewTopMargin = 45.0
            cell.viewLeftMargin = 30.0
            cell.viewRightMargin = 30.0
            cell.viewBottomMargin = 40.0
        }
        return row
    }
}
