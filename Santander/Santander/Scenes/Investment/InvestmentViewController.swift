//
//  InvestmentViewController.swift
//  Santander
//
//  Created by Gabriel vieira on 4/22/18.
//  Copyright (c) 2018 Gabriel vieira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit

protocol InvestmentDisplayLogic: class
{
  func displayFundDetail(viewModel: Investment.FetchFund.ViewModel)
}

class InvestmentViewController: BaseViewController, InvestmentDisplayLogic
{
  var interactor: InvestmentBusinessLogic?
  var router: (NSObjectProtocol & InvestmentRoutingLogic & InvestmentDataPassing)?
  var scrollView: UIScrollView = UIScrollView()
    var fundNameLabel: UILabel = UILabel()
    var descFundLabel: UILabel = UILabel()
    var scrollContainerView: UIView = UIView()
    var riskBar: RiskBar?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = InvestmentInteractor()
    let presenter = InvestmentPresenter()
    let router = InvestmentRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    self.fetchFund()
  }
  
    private func configUI(viewModel: Investment.FetchFund.ViewModel) {
        
        self.view.addSubview(self.scrollView)
        self.scrollView.snp.makeConstraints({ (make) in
            make.left.right.top.bottom.equalTo(0)
        })
        
        self.scrollView.bounces = false
        self.scrollView.addSubview(self.scrollContainerView)
        
        self.scrollContainerView.snp.makeConstraints { (make) in
            make.left.right.top.bottom.equalTo(0)
            make.width.equalTo(self.view)
            make.height.equalTo(1140)
        }

        let screenTitleLabel = UILabel()
        screenTitleLabel.font = UIFont.DINPro_Medium(ofSize: 16)
        screenTitleLabel.textColor = Color.black
        screenTitleLabel.text = "Investimento"

        self.self.scrollContainerView.addSubview(screenTitleLabel)
        screenTitleLabel.snp.makeConstraints { (make) in
            make.centerX.equalTo(self.scrollContainerView)
            make.height.equalTo(22)
            make.top.equalTo(self.scrollContainerView).offset(24)
        }

//        shareClick
        let shareIconImage = UIImage(named: "share_icon")!
        let shareButton = UIButton()
        shareButton.setBackgroundImage(shareIconImage, for: .normal)
        shareButton.addTarget(self, action: #selector(shareClick), for: .touchUpInside)
        
        self.scrollContainerView.addSubview(shareButton)
        shareButton.snp.makeConstraints { (make) in
            make.width.equalTo(19)
            make.height.equalTo(24)
            make.top.equalTo(20)
            make.right.equalTo(-25)
        }


        let secondTitleLabel = UILabel()
        secondTitleLabel.font = UIFont.DINPro_Medium(ofSize: 14)
        secondTitleLabel.textColor = Color.secondaryGray
        secondTitleLabel.text = viewModel.screen.title ?? ""

        self.scrollContainerView.addSubview(secondTitleLabel)
        secondTitleLabel.snp.makeConstraints { (make) in
            make.centerX.equalTo(self.scrollContainerView)
            make.height.equalTo(22)
            make.top.equalTo(screenTitleLabel.snp.bottom).offset(24)
        }


        self.fundNameLabel.font = UIFont.DINPro_Medium(ofSize: 28)
        self.fundNameLabel.textColor = Color.black
        self.fundNameLabel.text = viewModel.screen.fundName ?? ""
        self.fundNameLabel.numberOfLines = 0
        self.fundNameLabel.textAlignment = .center

        self.scrollContainerView.addSubview(self.fundNameLabel)
        self.fundNameLabel.snp.makeConstraints { (make) in
            make.centerX.equalTo(self.scrollContainerView)
            make.width.equalTo(self.scrollContainerView).multipliedBy(0.85)
            make.height.equalTo(80)
            make.top.equalTo(secondTitleLabel.snp.bottom).offset(0)
        }

        let separator = CustomSeparator(frame: CGRect.zero, color: Color.lightGray)

        self.scrollContainerView.addSubview(separator)
        separator.snp.makeConstraints { (make) in
            make.top.equalTo(self.fundNameLabel.snp.bottom).offset(5)
            make.height.equalTo(20)
            make.left.equalTo(25)
            make.right.equalTo(-25)
        }
        
        
        let descTitleLabel = UILabel()
        descTitleLabel.font = UIFont.DINPro_Medium(ofSize: 16)
        descTitleLabel.textColor = Color.secondaryGray
        descTitleLabel.text = viewModel.screen.whatIs ?? ""
        
        self.scrollContainerView.addSubview(descTitleLabel)
        descTitleLabel.snp.makeConstraints { (make) in
            make.centerX.equalTo(self.scrollContainerView)
            make.height.equalTo(22)
            make.top.equalTo(separator.snp.bottom).offset(14)
        }
        
        
        self.descFundLabel.font = UIFont.DINPro_Light(ofSize: 16)
        self.descFundLabel.textColor = Color.secondaryGray
        self.descFundLabel.text = viewModel.screen.definition ?? ""
        self.descFundLabel.numberOfLines = 0
        self.descFundLabel.textAlignment = .center
        
        self.scrollContainerView.addSubview(self.descFundLabel)
        self.descFundLabel.snp.makeConstraints { (make) in
            make.centerX.equalTo(self.scrollContainerView)
            make.width.equalTo(self.scrollContainerView).multipliedBy(0.85)
            make.height.equalTo(70)
            make.top.equalTo(descTitleLabel.snp.bottom).offset(0)
        }
        
        
        let risklabel = UILabel()
        risklabel.font = UIFont.DINPro_Medium(ofSize: 16)
        risklabel.textColor = Color.secondaryGray
        risklabel.text = viewModel.screen.riskTitle ?? ""
        
        self.scrollContainerView.addSubview(risklabel)
        risklabel.snp.makeConstraints { (make) in
            make.centerX.equalTo(self.scrollContainerView)
            make.height.equalTo(22)
            make.top.equalTo(self.descFundLabel.snp.bottom).offset(35)
        }

        let risk = RiskType.init(rawValue: viewModel.screen.risk ?? 2)!
        self.riskBar = RiskBar(frame: CGRect(x: 0, y: 0, width: self.view.frame.width * 0.85, height: 20), selectedRisk: risk)
        self.scrollContainerView.addSubview(self.riskBar!)
        self.riskBar!.snp.makeConstraints { (make) in
            make.centerX.equalTo(self.scrollContainerView)
            make.top.equalTo(risklabel.snp.bottom).offset(35)
            make.height.equalTo(20)
            make.width.equalTo(self.scrollContainerView).multipliedBy(0.85)
        }
        
        let moreInfoLabel = UILabel()
        moreInfoLabel.font = UIFont.DINPro_Medium(ofSize: 16)
        moreInfoLabel.textColor = Color.secondaryGray
        moreInfoLabel.text = viewModel.screen.infoTitle ?? ""

        self.scrollContainerView.addSubview(moreInfoLabel)
        moreInfoLabel.snp.makeConstraints { (make) in
            make.centerX.equalTo(self.scrollContainerView)
            make.height.equalTo(22)
            make.top.equalTo(self.riskBar!.snp.bottom).offset(35)
        }
        
        //MORE INFO
        let cdiHeaderLabel = UILabel()
        cdiHeaderLabel.font = UIFont.DINPro_Regular(ofSize: 14)
        cdiHeaderLabel.textColor = Color.gray
        cdiHeaderLabel.textAlignment = .right
        cdiHeaderLabel.text = "CDI"
        
        self.scrollContainerView.addSubview(cdiHeaderLabel)
        cdiHeaderLabel.snp.makeConstraints { (make) in
            make.width.equalTo(30)
            make.height.equalTo(20)
            make.right.equalTo(-25)
            make.top.equalTo(moreInfoLabel.snp.bottom).offset(25)
        }
        
        let fundHeaderLabel = UILabel()
        fundHeaderLabel.font = UIFont.DINPro_Regular(ofSize: 14)
        fundHeaderLabel.textColor = Color.gray
        fundHeaderLabel.textAlignment = .right
        fundHeaderLabel.text = "Fundo"
        
        self.scrollContainerView.addSubview(fundHeaderLabel)
        fundHeaderLabel.snp.makeConstraints { (make) in
            make.width.equalTo(45)
            make.height.equalTo(20)
            make.right.equalTo(cdiHeaderLabel.snp.right).offset(-90)
            make.top.equalTo(moreInfoLabel.snp.bottom).offset(25)
        }
        
        var topDistance = 0
        //MORE INFO LIST
        for (index,item) in viewModel.profiabilityList.enumerated() {
            
            if index == 0 {
                topDistance = 10
            } else {
                topDistance += 30
            }
            
            let firstLabel = UILabel()
            firstLabel.font = UIFont.DINPro_Regular(ofSize: 14)
            firstLabel.textColor = Color.black
            firstLabel.textAlignment = .right
            firstLabel.text = item.cdi
            
            self.scrollContainerView.addSubview(firstLabel)
            firstLabel.snp.makeConstraints { (make) in
                make.width.equalTo(45)
                make.height.equalTo(20)
                make.right.equalTo(-25)
                make.top.equalTo(fundHeaderLabel.snp.bottom).offset(topDistance)
            }
            
            let secontLabel = UILabel()
            secontLabel.font = UIFont.DINPro_Regular(ofSize: 14)
            secontLabel.textColor = Color.black
            secontLabel.textAlignment = .right
            secontLabel.text = item.fund
            
            self.scrollContainerView.addSubview(secontLabel)
            secontLabel.snp.makeConstraints { (make) in
                make.width.equalTo(45)
                make.height.equalTo(20)
                make.right.equalTo(cdiHeaderLabel.snp.right).offset(-90)
                make.top.equalTo(fundHeaderLabel.snp.bottom).offset(topDistance)
            }
            
            let thirdLabel = UILabel()
            thirdLabel.font = UIFont.DINPro_Regular(ofSize: 14)
            thirdLabel.textColor = Color.gray
            thirdLabel.textAlignment = .left
            thirdLabel.text = item.name
            
            self.scrollContainerView.addSubview(thirdLabel)
            thirdLabel.snp.makeConstraints { (make) in
                make.width.equalTo(60)
                make.height.equalTo(20)
                make.left.equalTo(25)
                make.top.equalTo(fundHeaderLabel.snp.bottom).offset(topDistance)
            }
        }
        
        let div = UIView()
        div.backgroundColor = Color.lightGray
        self.scrollContainerView.addSubview(div)
        div.snp.makeConstraints { (make) in
            make.left.equalTo(25)
            make.right.equalTo(-25)
            make.top.equalTo(fundHeaderLabel.snp.bottom).offset(topDistance + 40)
            make.height.equalTo(1)
        }
        
        let infoList = viewModel.screen.info ?? []
        topDistance = 0
        //FUND INFO
        
        for (index,item) in infoList.enumerated() {
            
            if index == 0 {
                topDistance = 20
            } else {
                topDistance += 30
            }
            
            let firstLabel = UILabel()
            firstLabel.font = UIFont.DINPro_Regular(ofSize: 14)
            firstLabel.textColor = Color.black
            firstLabel.textAlignment = .right
            firstLabel.text = item.data ?? ""
            firstLabel.adjustsFontSizeToFitWidth = true
            firstLabel.minimumScaleFactor = 0.5
            
            self.scrollContainerView.addSubview(firstLabel)
            firstLabel.snp.makeConstraints { (make) in
                make.width.equalTo(self.scrollView).multipliedBy(0.3)
                make.height.equalTo(20)
                make.right.equalTo(-25)
                make.top.equalTo(div.snp.bottom).offset(topDistance)
            }
            
            let secontLabel = UILabel()
            secontLabel.font = UIFont.DINPro_Regular(ofSize: 14)
            secontLabel.textColor = Color.gray
            secontLabel.textAlignment = .left
            secontLabel.text = item.name ?? ""
            secontLabel.adjustsFontSizeToFitWidth = true
            secontLabel.minimumScaleFactor = 0.5
            
            self.scrollContainerView.addSubview(secontLabel)
            secontLabel.snp.makeConstraints { (make) in
                make.width.equalTo(self.scrollView).multipliedBy(0.5)
                make.height.equalTo(20)
                make.left.equalTo(25)
                make.top.equalTo(div.snp.bottom).offset(topDistance)
            }
        }
        //DOWNLOAD INFO
        let downloadList = viewModel.screen.downInfo ?? []
        for item in downloadList {
            
            topDistance += 30
            
            let firstLabel = UILabel()
            firstLabel.font = UIFont.DINPro_Regular(ofSize: 14)
            firstLabel.textColor = Color.red
            firstLabel.textAlignment = .right
            firstLabel.text = "Baixar"
            firstLabel.adjustsFontSizeToFitWidth = true
            firstLabel.minimumScaleFactor = 0.5
            
            self.scrollContainerView.addSubview(firstLabel)
            firstLabel.snp.makeConstraints { (make) in
                make.width.equalTo(60)
                make.height.equalTo(20)
                make.right.equalTo(-25)
                make.top.equalTo(div.snp.bottom).offset(topDistance)
            }
            
            let donwload_icon = UIImageView(image: UIImage(named: "download_arrow_icon")!)
            
            self.scrollContainerView.addSubview(donwload_icon)
            donwload_icon.snp.makeConstraints { (make) in
                make.width.equalTo(13)
                make.height.equalTo(13)
                make.top.equalTo(div.snp.bottom).offset(topDistance + 3)
                make.right.equalTo(firstLabel.snp.left).offset(10)
            }
            
            let secontLabel = UILabel()
            secontLabel.font = UIFont.DINPro_Regular(ofSize: 14)
            secontLabel.textColor = Color.gray
            secontLabel.textAlignment = .left
            secontLabel.text = item.name ?? ""
            secontLabel.adjustsFontSizeToFitWidth = true
            secontLabel.minimumScaleFactor = 0.5
            
            self.scrollContainerView.addSubview(secontLabel)
            secontLabel.snp.makeConstraints { (make) in
                make.width.equalTo(self.scrollView).multipliedBy(0.5)
                make.height.equalTo(20)
                make.left.equalTo(25)
                make.top.equalTo(div.snp.bottom).offset(topDistance)
            }
        }
        
        let investButton = RoundedButton()
        investButton.addTarget(self, action: #selector(investClick), for: .touchUpInside)
        investButton.setTitle("Investir", for: .normal)
        self.scrollContainerView.addSubview(investButton)
        investButton.snp.makeConstraints { (make) in
            make.left.equalTo(25)
            make.right.equalTo(-25)
            make.top.equalTo(div.snp.bottom).offset(topDistance + 70)
            make.height.equalTo(50)
        }
        
    }
    
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func fetchFund()
  {
    self.showLoader()
    let request = Investment.FetchFund.Request()
    interactor?.fetchFund(request: request)
  }
  
  func displayFundDetail(viewModel: Investment.FetchFund.ViewModel)
  {
    self.hideLoader()
    self.configUI(viewModel: viewModel)
    //nameTextField.text = viewModel.name
  }
    
  @objc func investClick() {
    self.router?.openSafariViewController(source: self)
    }
    
    @objc func shareClick() {
        //this controller not in router because is alert
        let alert = UIAlertController(title: "Share", message: "Share Clicked", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
        self.show(alert, sender: nil)
    }
}
