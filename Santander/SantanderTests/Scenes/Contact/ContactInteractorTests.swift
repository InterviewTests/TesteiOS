//
//  ContactInteractorTests.swift
//  Santander
//
//  Created by Gabriel vieira on 4/23/18.
//  Copyright (c) 2018 Gabriel vieira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Santander
import XCTest

class ContactInteractorTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: ContactInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupContactInteractor()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupContactInteractor()
  {
    sut = ContactInteractor()
  }
  
  // MARK: Test doubles
  
  class ContactPresentationLogicSpy: ContactPresentationLogic
  {
    var presentFormCalled = false
    
    func presentForm(response: Contact.fetchFormCells.Response) {
        presentFormCalled = true
    }
  }
    
    class ContactWorkerSpy: ContactWorker
    {
        var fetchCalled = false
        
        override func fetchFormCells(completionHandler: @escaping (FormCells?, Error?) -> Void) {
            fetchCalled = true
            completionHandler(Seed.CellData(), nil)
        }
    }
  
  // MARK: Tests
    func testFetchCellsdShouldAskWorkerToFetchCells()
    {
        // Given
        let contactWorkerSpy = ContactWorkerSpy()
        sut.worker = contactWorkerSpy
        let request = Contact.fetchFormCells.Request()
        
        // When
        sut.fetchFormCells(request: request)
        
        // Then
        XCTAssertTrue(contactWorkerSpy.fetchCalled, "fetchCells(request:) should ask the worker to fetch gists")
    }
    
    func testFetchCellsShouldAskPresenterToFormatGists()
    {
        // Given
        let contactWorkerSpy = ContactWorkerSpy()
        sut.worker = contactWorkerSpy
        let contactPresentationLogicSpy = ContactPresentationLogicSpy()
        sut.presenter = contactPresentationLogicSpy
        let request = Contact.fetchFormCells.Request()

        // When
        sut.fetchFormCells(request: request)
//
        // Then
        XCTAssertTrue(contactPresentationLogicSpy.presentFormCalled)
    }
}
