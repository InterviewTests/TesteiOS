//
//  InvestmentInteractorTests.swift
//  Santander
//
//  Created by Gabriel vieira on 4/23/18.
//  Copyright (c) 2018 Gabriel vieira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Santander
import XCTest

class InvestmentInteractorTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: InvestmentInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupInvestmentInteractor()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupInvestmentInteractor()
  {
    sut = InvestmentInteractor()
  }
  
  // MARK: Test doubles
  
  class InvestmentPresentationLogicSpy: InvestmentPresentationLogic
  {
    var presentFundDetailCalled = false
    
    func presentFundDetail(response: Investment.FetchFund.Response)
    {
      presentFundDetailCalled = true
    }
  }
    
    class FundDetailWorkerSpy: InvestmentWorker
    {
        var fetchCalled = false

        override func fetchFund(completionHandler: @escaping (Fund?, Error?) -> Void) {
            
            fetchCalled = true
            completionHandler(Seed.fundsData(), nil)
        }
    }
  
  // MARK: Tests

    func testFetchFundShouldAskWorkerToFetchFund()
    {
        // Given
        let fundDetailWorkerSpy = FundDetailWorkerSpy()
        sut.worker = fundDetailWorkerSpy
        let request = Investment.FetchFund.Request()
        
        // When
        sut.fetchFund(request: request)
        
        // Then
        XCTAssertTrue(fundDetailWorkerSpy.fetchCalled, "fetchFund(request:) should ask the worker to fetch gists")
    }

    func testFetchFundShouldAskPresenterToFormatGists()
    {
        // Given
        let fundDetailWorkerSpy = FundDetailWorkerSpy()
        sut.worker = fundDetailWorkerSpy
        let investmentPresentationLogicSpy = InvestmentPresentationLogicSpy()
        sut.presenter = investmentPresentationLogicSpy
        let request = Investment.FetchFund.Request()
        
        // When
        sut.fetchFund(request: request)
        
        // Then
        XCTAssertTrue(investmentPresentationLogicSpy.presentFundDetailCalled)
    }
}
