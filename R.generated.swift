//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 10 files.
  struct file {
    /// Resource file `DINEngschriftStd.otf`.
    static let dinEngschriftStdOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "DINEngschriftStd", pathExtension: "otf")
    /// Resource file `DINMittelschriftStd.otf`.
    static let dinMittelschriftStdOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "DINMittelschriftStd", pathExtension: "otf")
    /// Resource file `DINNeuzeitGroteskStd-BdCond.otf`.
    static let dinNeuzeitGroteskStdBdCondOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "DINNeuzeitGroteskStd-BdCond", pathExtension: "otf")
    /// Resource file `DINNeuzeitGroteskStd-Light.otf`.
    static let dinNeuzeitGroteskStdLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "DINNeuzeitGroteskStd-Light", pathExtension: "otf")
    /// Resource file `DINPro-Black.otf`.
    static let dinProBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "DINPro-Black", pathExtension: "otf")
    /// Resource file `DINPro-Bold.otf`.
    static let dinProBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "DINPro-Bold", pathExtension: "otf")
    /// Resource file `DINPro-Light.otf`.
    static let dinProLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "DINPro-Light", pathExtension: "otf")
    /// Resource file `DINPro-Medium.otf`.
    static let dinProMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "DINPro-Medium", pathExtension: "otf")
    /// Resource file `DINPro-Regular.otf`.
    static let dinProRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "DINPro-Regular", pathExtension: "otf")
    /// Resource file `stkeys.plist`.
    static let stkeysPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "stkeys", pathExtension: "plist")
    
    /// `bundle.url(forResource: "DINEngschriftStd", withExtension: "otf")`
    static func dinEngschriftStdOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dinEngschriftStdOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "DINMittelschriftStd", withExtension: "otf")`
    static func dinMittelschriftStdOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dinMittelschriftStdOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "DINNeuzeitGroteskStd-BdCond", withExtension: "otf")`
    static func dinNeuzeitGroteskStdBdCondOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dinNeuzeitGroteskStdBdCondOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "DINNeuzeitGroteskStd-Light", withExtension: "otf")`
    static func dinNeuzeitGroteskStdLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dinNeuzeitGroteskStdLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "DINPro-Black", withExtension: "otf")`
    static func dinProBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dinProBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "DINPro-Bold", withExtension: "otf")`
    static func dinProBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dinProBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "DINPro-Light", withExtension: "otf")`
    static func dinProLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dinProLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "DINPro-Medium", withExtension: "otf")`
    static func dinProMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dinProMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "DINPro-Regular", withExtension: "otf")`
    static func dinProRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dinProRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "stkeys", withExtension: "plist")`
    static func stkeysPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.stkeysPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 9 fonts.
  struct font: Rswift.Validatable {
    /// Font `DINEngschriftStd`.
    static let dinEngschriftStd = Rswift.FontResource(fontName: "DINEngschriftStd")
    /// Font `DINMittelschriftStd`.
    static let dinMittelschriftStd = Rswift.FontResource(fontName: "DINMittelschriftStd")
    /// Font `DINNeuzeitGroteskStd-BdCond`.
    static let dinNeuzeitGroteskStdBdCond = Rswift.FontResource(fontName: "DINNeuzeitGroteskStd-BdCond")
    /// Font `DINNeuzeitGroteskStd-Light`.
    static let dinNeuzeitGroteskStdLight = Rswift.FontResource(fontName: "DINNeuzeitGroteskStd-Light")
    /// Font `DINPro-Black`.
    static let dinProBlack = Rswift.FontResource(fontName: "DINPro-Black")
    /// Font `DINPro-Bold`.
    static let dinProBold = Rswift.FontResource(fontName: "DINPro-Bold")
    /// Font `DINPro-Light`.
    static let dinProLight = Rswift.FontResource(fontName: "DINPro-Light")
    /// Font `DINPro-Medium`.
    static let dinProMedium = Rswift.FontResource(fontName: "DINPro-Medium")
    /// Font `DINPro-Regular`.
    static let dinProRegular = Rswift.FontResource(fontName: "DINPro-Regular")
    
    /// `UIFont(name: "DINEngschriftStd", size: ...)`
    static func dinEngschriftStd(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: dinEngschriftStd, size: size)
    }
    
    /// `UIFont(name: "DINMittelschriftStd", size: ...)`
    static func dinMittelschriftStd(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: dinMittelschriftStd, size: size)
    }
    
    /// `UIFont(name: "DINNeuzeitGroteskStd-BdCond", size: ...)`
    static func dinNeuzeitGroteskStdBdCond(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: dinNeuzeitGroteskStdBdCond, size: size)
    }
    
    /// `UIFont(name: "DINNeuzeitGroteskStd-Light", size: ...)`
    static func dinNeuzeitGroteskStdLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: dinNeuzeitGroteskStdLight, size: size)
    }
    
    /// `UIFont(name: "DINPro-Black", size: ...)`
    static func dinProBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: dinProBlack, size: size)
    }
    
    /// `UIFont(name: "DINPro-Bold", size: ...)`
    static func dinProBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: dinProBold, size: size)
    }
    
    /// `UIFont(name: "DINPro-Light", size: ...)`
    static func dinProLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: dinProLight, size: size)
    }
    
    /// `UIFont(name: "DINPro-Medium", size: ...)`
    static func dinProMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: dinProMedium, size: size)
    }
    
    /// `UIFont(name: "DINPro-Regular", size: ...)`
    static func dinProRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: dinProRegular, size: size)
    }
    
    static func validate() throws {
      if R.font.dinProRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'DINPro-Regular' could not be loaded, is 'DINPro-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.dinMittelschriftStd(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'DINMittelschriftStd' could not be loaded, is 'DINMittelschriftStd.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.dinProBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'DINPro-Black' could not be loaded, is 'DINPro-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.dinProMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'DINPro-Medium' could not be loaded, is 'DINPro-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.dinEngschriftStd(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'DINEngschriftStd' could not be loaded, is 'DINEngschriftStd.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.dinProBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'DINPro-Bold' could not be loaded, is 'DINPro-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.dinNeuzeitGroteskStdBdCond(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'DINNeuzeitGroteskStd-BdCond' could not be loaded, is 'DINNeuzeitGroteskStd-BdCond.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.dinProLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'DINPro-Light' could not be loaded, is 'DINPro-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.dinNeuzeitGroteskStdLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'DINNeuzeitGroteskStd-Light' could not be loaded, is 'DINNeuzeitGroteskStd-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 26 images.
  struct image {
    /// Image `Botão investir`.
    static let botãoInvestir = Rswift.ImageResource(bundle: R.hostingBundle, name: "Botão investir")
    /// Image `Botão send`.
    static let botãoSend = Rswift.ImageResource(bundle: R.hostingBundle, name: "Botão send")
    /// Image `Linha numero da conta-2`.
    static let linhaNumeroDaConta2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Linha numero da conta-2")
    /// Image `Linha número da conta-1`.
    static let linhaNúmeroDaConta1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Linha número da conta-1")
    /// Image `Rectangle 2 Copy 5`.
    static let rectangle2Copy5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 2 Copy 5")
    /// Image `Rectangle 2 Copy 6`.
    static let rectangle2Copy6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 2 Copy 6")
    /// Image `Rectangle 2 Copy 7`.
    static let rectangle2Copy7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 2 Copy 7")
    /// Image `Rectangle 2 Copy 9`.
    static let rectangle2Copy9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 2 Copy 9")
    /// Image `Rectangle 4`.
    static let rectangle4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 4")
    /// Image `Rectangle-1`.
    static let rectangle1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle-1")
    /// Image `Rectangle-2`.
    static let rectangle2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle-2")
    /// Image `Separador`.
    static let separador = Rswift.ImageResource(bundle: R.hostingBundle, name: "Separador")
    /// Image `Spearador`.
    static let spearador = Rswift.ImageResource(bundle: R.hostingBundle, name: "Spearador")
    /// Image `download`.
    static let download = Rswift.ImageResource(bundle: R.hostingBundle, name: "download")
    /// Image `green2`.
    static let green2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "green2")
    /// Image `investir-1`.
    static let investir1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "investir-1")
    /// Image `investir`.
    static let investir = Rswift.ImageResource(bundle: R.hostingBundle, name: "investir")
    /// Image `line_green`.
    static let line_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "line_green")
    /// Image `line_red`.
    static let line_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "line_red")
    /// Image `risk`.
    static let risk = Rswift.ImageResource(bundle: R.hostingBundle, name: "risk")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `signup_clicked`.
    static let signup_clicked = Rswift.ImageResource(bundle: R.hostingBundle, name: "signup_clicked")
    /// Image `signup`.
    static let signup = Rswift.ImageResource(bundle: R.hostingBundle, name: "signup")
    /// Image `tab_item_contact 3`.
    static let tab_item_contact3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_item_contact 3")
    /// Image `tab_item_contact`.
    static let tab_item_contact = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_item_contact")
    /// Image `tab_item_invest`.
    static let tab_item_invest = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_item_invest")
    
    /// `UIImage(named: "Botão investir", bundle: ..., traitCollection: ...)`
    static func botãoInvestir(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.botãoInvestir, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Botão send", bundle: ..., traitCollection: ...)`
    static func botãoSend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.botãoSend, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Linha numero da conta-2", bundle: ..., traitCollection: ...)`
    static func linhaNumeroDaConta2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.linhaNumeroDaConta2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Linha número da conta-1", bundle: ..., traitCollection: ...)`
    static func linhaNúmeroDaConta1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.linhaNúmeroDaConta1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 2 Copy 5", bundle: ..., traitCollection: ...)`
    static func rectangle2Copy5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle2Copy5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 2 Copy 6", bundle: ..., traitCollection: ...)`
    static func rectangle2Copy6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle2Copy6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 2 Copy 7", bundle: ..., traitCollection: ...)`
    static func rectangle2Copy7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle2Copy7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 2 Copy 9", bundle: ..., traitCollection: ...)`
    static func rectangle2Copy9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle2Copy9, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 4", bundle: ..., traitCollection: ...)`
    static func rectangle4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle-1", bundle: ..., traitCollection: ...)`
    static func rectangle1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle-2", bundle: ..., traitCollection: ...)`
    static func rectangle2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Separador", bundle: ..., traitCollection: ...)`
    static func separador(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.separador, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Spearador", bundle: ..., traitCollection: ...)`
    static func spearador(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.spearador, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "download", bundle: ..., traitCollection: ...)`
    static func download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.download, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "green2", bundle: ..., traitCollection: ...)`
    static func green2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.green2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "investir", bundle: ..., traitCollection: ...)`
    static func investir(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.investir, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "investir-1", bundle: ..., traitCollection: ...)`
    static func investir1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.investir1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "line_green", bundle: ..., traitCollection: ...)`
    static func line_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line_green, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "line_red", bundle: ..., traitCollection: ...)`
    static func line_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line_red, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "risk", bundle: ..., traitCollection: ...)`
    static func risk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.risk, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "signup", bundle: ..., traitCollection: ...)`
    static func signup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "signup_clicked", bundle: ..., traitCollection: ...)`
    static func signup_clicked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signup_clicked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_item_contact 3", bundle: ..., traitCollection: ...)`
    static func tab_item_contact3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_item_contact3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_item_contact", bundle: ..., traitCollection: ...)`
    static func tab_item_contact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_item_contact, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_item_invest", bundle: ..., traitCollection: ...)`
    static func tab_item_invest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_item_invest, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 8 nibs.
  struct nib {
    /// Nib `FundHeaderTableView`.
    static let fundHeaderTableView = _R.nib._FundHeaderTableView()
    /// Nib `MoreInfoHeaderView`.
    static let moreInfoHeaderView = _R.nib._MoreInfoHeaderView()
    /// Nib `MoreInfoTableViewCell`.
    static let moreInfoTableViewCell = _R.nib._MoreInfoTableViewCell()
    /// Nib `SantanderEmailTypeField`.
    static let santanderEmailTypeField = _R.nib._SantanderEmailTypeField()
    /// Nib `SantanderFundTableViewCell`.
    static let santanderFundTableViewCell = _R.nib._SantanderFundTableViewCell()
    /// Nib `SantanderInvestmentRiskIndicatorCellTableViewCell`.
    static let santanderInvestmentRiskIndicatorCellTableViewCell = _R.nib._SantanderInvestmentRiskIndicatorCellTableViewCell()
    /// Nib `SantanderNameTextField`.
    static let santanderNameTextField = _R.nib._SantanderNameTextField()
    /// Nib `SantanderPhoneTextField`.
    static let santanderPhoneTextField = _R.nib._SantanderPhoneTextField()
    
    /// `UINib(name: "FundHeaderTableView", in: bundle)`
    static func fundHeaderTableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fundHeaderTableView)
    }
    
    /// `UINib(name: "MoreInfoHeaderView", in: bundle)`
    static func moreInfoHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.moreInfoHeaderView)
    }
    
    /// `UINib(name: "MoreInfoTableViewCell", in: bundle)`
    static func moreInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.moreInfoTableViewCell)
    }
    
    /// `UINib(name: "SantanderEmailTypeField", in: bundle)`
    static func santanderEmailTypeField(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.santanderEmailTypeField)
    }
    
    /// `UINib(name: "SantanderFundTableViewCell", in: bundle)`
    static func santanderFundTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.santanderFundTableViewCell)
    }
    
    /// `UINib(name: "SantanderInvestmentRiskIndicatorCellTableViewCell", in: bundle)`
    static func santanderInvestmentRiskIndicatorCellTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.santanderInvestmentRiskIndicatorCellTableViewCell)
    }
    
    /// `UINib(name: "SantanderNameTextField", in: bundle)`
    static func santanderNameTextField(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.santanderNameTextField)
    }
    
    /// `UINib(name: "SantanderPhoneTextField", in: bundle)`
    static func santanderPhoneTextField(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.santanderPhoneTextField)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `MoreInfoTableViewCell`.
    static let moreInfoTableViewCell: Rswift.ReuseIdentifier<MoreInfoTableViewCell> = Rswift.ReuseIdentifier(identifier: "MoreInfoTableViewCell")
    /// Reuse identifier `SantanderFundTableViewCell`.
    static let santanderFundTableViewCell: Rswift.ReuseIdentifier<SantanderFundTableViewCell> = Rswift.ReuseIdentifier(identifier: "SantanderFundTableViewCell")
    /// Reuse identifier `SantanderInvestmentRiskIndicatorCellTableViewCell`.
    static let santanderInvestmentRiskIndicatorCellTableViewCell: Rswift.ReuseIdentifier<SantanderInvestmentRiskIndicatorCellTableViewCell> = Rswift.ReuseIdentifier(identifier: "SantanderInvestmentRiskIndicatorCellTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _FundHeaderTableView.validate()
      try _SantanderEmailTypeField.validate()
      try _SantanderNameTextField.validate()
      try _SantanderPhoneTextField.validate()
      try _SantanderInvestmentRiskIndicatorCellTableViewCell.validate()
      try _SantanderFundTableViewCell.validate()
    }
    
    struct _FundHeaderTableView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FundHeaderTableView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FundHeaderTableView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FundHeaderTableView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share' is used in nib 'FundHeaderTableView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MoreInfoHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MoreInfoHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MoreInfoHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoreInfoHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _MoreInfoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MoreInfoTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MoreInfoTableViewCell"
      let name = "MoreInfoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MoreInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoreInfoTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SantanderEmailTypeField: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SantanderEmailTypeField"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SantanderEmailTypeField? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SantanderEmailTypeField
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Linha numero da conta", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Linha numero da conta' is used in nib 'SantanderEmailTypeField', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SantanderFundTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SantanderFundTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SantanderFundTableViewCell"
      let name = "SantanderFundTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SantanderFundTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SantanderFundTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "download", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'download' is used in nib 'SantanderFundTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SantanderInvestmentRiskIndicatorCellTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SantanderInvestmentRiskIndicatorCellTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SantanderInvestmentRiskIndicatorCellTableViewCell"
      let name = "SantanderInvestmentRiskIndicatorCellTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SantanderInvestmentRiskIndicatorCellTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SantanderInvestmentRiskIndicatorCellTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "laranja", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'laranja' is used in nib 'SantanderInvestmentRiskIndicatorCellTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "green2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'green2' is used in nib 'SantanderInvestmentRiskIndicatorCellTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'red' is used in nib 'SantanderInvestmentRiskIndicatorCellTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "green1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'green1' is used in nib 'SantanderInvestmentRiskIndicatorCellTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "yellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'yellow' is used in nib 'SantanderInvestmentRiskIndicatorCellTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SantanderNameTextField: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SantanderNameTextField"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SantanderNameTextField? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SantanderNameTextField
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Linha numero da conta", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Linha numero da conta' is used in nib 'SantanderNameTextField', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SantanderPhoneTextField: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SantanderPhoneTextField"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SantanderPhoneTextField? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SantanderPhoneTextField
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Linha numero da conta", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Linha numero da conta' is used in nib 'SantanderPhoneTextField', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SantanderTabViewController
      
      let bundle = R.hostingBundle
      let finishedID = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "FinishedID")
      let name = "Main"
      let santanderCustomerViewController = StoryboardViewControllerResource<SantanderCustomerViewController>(identifier: "SantanderCustomerViewController")
      let santanderFundViewController = StoryboardViewControllerResource<SantanderFundViewController>(identifier: "SantanderFundViewController")
      let santanderFundsViewController = StoryboardViewControllerResource<SantanderFundsViewController>(identifier: "SantanderFundsViewController")
      
      func finishedID(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: finishedID)
      }
      
      func santanderCustomerViewController(_: Void = ()) -> SantanderCustomerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: santanderCustomerViewController)
      }
      
      func santanderFundViewController(_: Void = ()) -> SantanderFundViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: santanderFundViewController)
      }
      
      func santanderFundsViewController(_: Void = ()) -> SantanderFundsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: santanderFundsViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Rectangle-1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Rectangle-1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "laranja") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'laranja' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Botão investir") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Botão investir' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "red") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'red' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Spearador") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Spearador' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "green1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'green1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Separador") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Separador' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "green2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'green2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "signup") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'signup' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Botão send") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Botão send' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "yellow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'yellow' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().finishedID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'finishedID' could not be loaded from storyboard 'Main' as 'UIKit.UIViewController'.") }
        if _R.storyboard.main().santanderCustomerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'santanderCustomerViewController' could not be loaded from storyboard 'Main' as 'SantanderCustomerViewController'.") }
        if _R.storyboard.main().santanderFundsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'santanderFundsViewController' could not be loaded from storyboard 'Main' as 'SantanderFundsViewController'.") }
        if _R.storyboard.main().santanderFundViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'santanderFundViewController' could not be loaded from storyboard 'Main' as 'SantanderFundViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
