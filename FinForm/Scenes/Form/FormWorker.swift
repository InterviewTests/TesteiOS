//
//  FormWorker.swift
//  FinForm
//
//  Created by Gustavo Luís Soré on 23/07/2018.
//  Copyright (c) 2018 Sore. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class FormWorker
{
    // MARK: Validation
    func validateEmail(email:String) -> Bool{
        let emailRegEx = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}"
        
        let emailTest = NSPredicate(format:"SELF MATCHES %@", emailRegEx)
        return emailTest.evaluate(with: email)
    }
    
    func validateTelNumber(telNumber:String) -> Bool{
        return telNumber.count == 14 || telNumber.count == 15
    }
    
    func validateForm(arrayMetaData:[CellMetaData]) -> CellMetaData?{
        for var metaData in arrayMetaData{
            if let cell = metaData.cell{
                
                if let required = cell.required,let type = cell.type{
                    if required && type == .field{
                        if metaData.textValue.isEmpty{
                            metaData.fieldState = .Required
                            return metaData
                        }
                    }
                    if type == .field{
                        if let typeField = cell.typeField{
                            if typeField == .email{
                                if self.validateEmail(email: metaData.textValue) == false{
                                    metaData.fieldState = .Invalid
                                    return metaData
                                }
                            } else if typeField == .telNumber{
                                if self.validateTelNumber(telNumber: metaData.textValue) == false{
                                    metaData.fieldState = .Invalid
                                    return metaData
                                }
                            }
                        }
                    }
                }
                
            }
        }
        
        return nil
    }
    
    // MARK: CheckBox Logic
    func didSelect(cellMetaData:CellMetaData,arrayMetaData:[CellMetaData]) -> (cellMetaData:CellMetaData,index:Int,show:Bool){
        
        var array:[CellMetaData] = arrayMetaData
        if let cell = cellMetaData.cell{
            if let idToShow = cell.show{
                for i in 0...array.count - 1{
                    if let cell = array[i].cell{
                        if idToShow == cell.id{
                            let hidden = array[i].isHidden
                            array[i].isHidden = !hidden
                            return (array[i],i,hidden)
                            
                        }
                    }
                }
            }
        }
        
        return (array[0],0,true)
        
    }
    
    // MARK: Generate Cell Meta Data Array
    func generateMetaDataArray(cells:[Cell]) -> [CellMetaData]{
        var arrayCellsMetaData:[CellMetaData] = []
        for cell in cells{
            var cellMetaData = CellMetaData()
            cellMetaData.cell = cell
            if let hidden = cell.hidden{
                cellMetaData.isHidden = hidden
            }
            arrayCellsMetaData.append(cellMetaData)
        }
        return arrayCellsMetaData
    }
    
    // MARK: Tel Number Mask
    func telNumberMask(numbers:String) -> String{
        
        var value = numbers.digits
        
        if numbers.isEmpty{
            return value
        }
        
        let maskOne = "(**) ****-****"//14
        let maskTwo = "(**) *****-****"//15
        var mask = ""
        
        if value.count < 11{
            mask = maskOne
        } else{
            mask = maskTwo
        }
        
        value = getStringWithMask(mask: mask, text: value)
        
        return value
        
    }
    
    // MARK: Restart Cells Meta Data
    func restartCellsMetaData(arrayMetaData:[CellMetaData]) -> [CellMetaData]{
        var array:[CellMetaData] = arrayMetaData
        
        for i in 0...array.count - 1{
            if let hidden = array[i].cell?.hidden{
                array[i].isHidden = hidden
            }
            array[i].textValue = ""
            array[i].fieldState = .Default
            array[i].selected = false
        }
        
        return array
    }
    
    // MARK: Private utils methods
    private func getStringWithMask(mask:String,text:String) -> String{
        var value = ""
        var index = 0
        
        for i in 0...mask.count - 1{
            if index >= text.count{
                return value
            }
            
            if mask.subString(loc: i, length: 1) == "*"{
                value = "\(value)\(text.subString(loc: index, length: 1))"
                index = index + 1
            } else{
                value = "\(value)\(mask.subString(loc: i, length: 1))"
            }
        }
        return value
    }

}
