//
//  FormViewController.swift
//  FinForm
//
//  Created by Gustavo Luís Soré on 23/07/2018.
//  Copyright (c) 2018 Sore. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FormDisplayLogic: class
{
  func displayFetchedCells(viewModel: Form.FetchCells.ViewModel)
  func displayShowHideCell(viewModel: Form.ShowHideCell.ViewModel)
  func displayValidationResult(viewModel: Form.Validate.ViewModel)
}

class FormViewController: UIViewController, FormDisplayLogic
{
  var interactor: FormBusinessLogic?
  var router: (NSObjectProtocol & FormRoutingLogic & FormDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = FormInteractor()
    let presenter = FormPresenter()
    let router = FormRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
    
    private func setupTableView(){
        tableView.delegate = self
        tableView.dataSource = self
        
        tableView.separatorStyle = .none
        tableView.rowHeight = UITableViewAutomaticDimension
        tableView.estimatedRowHeight = 70
        
        registerNibs()
    }
    
    private func registerNibs(){
        tableView.register(FieldCell.nib, forCellReuseIdentifier: FieldCell.identifier)
        tableView.register(TextCell.nib, forCellReuseIdentifier: TextCell.identifier)
        tableView.register(ImageCell.nib, forCellReuseIdentifier: ImageCell.identifier)
        tableView.register(CheckBoxCell.nib, forCellReuseIdentifier: CheckBoxCell.identifier)
        tableView.register(ButtonCell.nib, forCellReuseIdentifier: ButtonCell.identifier)
    }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setupTableView()
    let tap = UITapGestureRecognizer(target: self, action: #selector(doneButtonAction))
    tap.cancelsTouchesInView = false
    tableView.addGestureRecognizer(tap)
    fetchCells()
  }
    
  // MARK: IBActions
  @IBAction func investimentAction(_ sender: Any) {
  }
  
  // MARK: Properties
  @IBOutlet var tableView: UITableView!
  var arrayCellsMetaData:[CellMetaData] = []
    
    
  // MARK: Fetch Cellls
  func fetchCells()
  {
    let request = Form.FetchCells.Request()
    interactor?.fetchCells(request: request)
  }
  
  func displayFetchedCells(viewModel: Form.FetchCells.ViewModel)
  {
    if viewModel.noInternet{
        let alert = UIAlertController.init(title: String.loc("NO_INTERNET_ACCESS_ALERT_TITLE"), message: String.loc("NO_INTERNET_ACCESS_ALERT_MESSAGE"), preferredStyle: UIAlertControllerStyle.alert)
        alert.addAction(UIAlertAction.init(title: "Ok", style: UIAlertActionStyle.default, handler: { (action) in
            self.fetchCells()
        }))
        self.present(alert, animated: true, completion: nil)
    } else{
        arrayCellsMetaData = viewModel.cellsMetaData
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
  }
    
    // MARK: Show Hide Cell
    func showHideCell(cellMetaData:CellMetaData,index:Int){
        let request = Form.ShowHideCell.Request.init(cellMetaData: cellMetaData, index: index)
        interactor?.showHideCell(request: request)
    }
    
    func displayShowHideCell(viewModel: Form.ShowHideCell.ViewModel){
        let index = viewModel.index
        let cellMetaData = viewModel.cellMetaData
        let show = viewModel.show
        
        let indexPath = IndexPath.init(row: index, section: 0)
        
        if show{
            self.arrayCellsMetaData.insert(cellMetaData, at: index)
            tableView.insertRows(at: [indexPath], with: UITableViewRowAnimation.automatic)
        } else{
            self.arrayCellsMetaData.remove(at: index)
            tableView.deleteRows(at: [indexPath], with: UITableViewRowAnimation.automatic)
        }
        
    }
    
    // MARK: Validate Result
    func validateForm()
    {
        let request = Form.Validate.Request.init(arrayMetaData: self.arrayCellsMetaData)
        interactor?.validate(request: request)
    }
    
    func displayValidationResult(viewModel: Form.Validate.ViewModel){
        if viewModel.success == false{
            
            if let title = viewModel.validationProblemTitle,let message = viewModel.validationProblemMessage{
                let alert = UIAlertController.init(title: title, message: message, preferredStyle: UIAlertControllerStyle.alert)
                alert.addAction(UIAlertAction.init(title: "Ok", style: UIAlertActionStyle.default, handler: nil))
                self.present(alert, animated: true, completion: nil)
            }
            
        } else{
            
            print("Sucesso")
            
        }
    }
}

// MARK: Table View Delegate / Data Source
extension FormViewController:UITableViewDelegate,UITableViewDataSource{
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return arrayCellsMetaData.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        var cellMetaData = arrayCellsMetaData[indexPath.row]
        if let cellModel = cellMetaData.cell{
            if let type = cellModel.type{
                switch type{
                case .field:
                    let cell = tableView.dequeueReusableCell(withIdentifier: FieldCell.identifier, for: indexPath) as! FieldCell
                    cell.selectionStyle = .none
                    cell.populate(cellMetaData: cellMetaData,index: indexPath.row)
                    self.addDoneButton(textField: cell.textField)
                    cell.updateValueCompletion = {value,index in
                        cellMetaData.textValue = value
                        self.arrayCellsMetaData[index] = cellMetaData
                    }
                    if let typeField = cellModel.typeField{
                        if typeField == .email{
                            cell.validationRuleCompletion = {email in
                                return FormWorker().validateEmail(email: email)
                            }
                        } else if typeField == .telNumber{
                            cell.canUpdateValueCompletion = {text,fullText in
                                return text.isNumeric() && fullText.count < 16
                            }
                        }
                    }
                    return cell
                case .text:
                    let cell = tableView.dequeueReusableCell(withIdentifier: TextCell.identifier, for: indexPath) as! TextCell
                    cell.selectionStyle = .none
                    cell.populate(cellMetaData: cellMetaData)
                    return cell
                case .image:
                    let cell = tableView.dequeueReusableCell(withIdentifier: ImageCell.identifier, for: indexPath) as! ImageCell
                    cell.selectionStyle = .none
                    cell.populate(cellMetaData: cellMetaData)
                    return cell
                case .checkbox:
                    let cell = tableView.dequeueReusableCell(withIdentifier: CheckBoxCell.identifier, for: indexPath) as! CheckBoxCell
                    cell.selectionStyle = .none
                    cell.populate(cellMetaData: cellMetaData,index: indexPath.row)
                    cell.selectionCompletion = {selected,index in
                        self.showHideCell(cellMetaData: cellMetaData, index: index)
                    }
                    return cell
                case .send:
                    let cell = tableView.dequeueReusableCell(withIdentifier: ButtonCell.identifier, for: indexPath) as! ButtonCell
                    cell.selectionStyle = .none
                    cell.populate(cellMetaData: cellMetaData)
                    cell.selectionCompletion = {metaData in
                        self.validateForm()
                    }
                    return cell
                }
            }
        }
        return UITableViewCell()
    }
    
    private func addDoneButton(textField:UITextField){
        //init toolbar
        let toolbar:UIToolbar = UIToolbar(frame: CGRect(x: 0, y: 0,  width: self.view.frame.size.width, height: 30))
        //create left side empty space so that done button set on right side
        let flexSpace = UIBarButtonItem(barButtonSystemItem:    .flexibleSpace, target: nil, action: nil)
        let doneBtn: UIBarButtonItem = UIBarButtonItem(title: "Done", style: .done, target: self, action: #selector(doneButtonAction))
        toolbar.setItems([flexSpace, doneBtn], animated: false)
        toolbar.sizeToFit()
        //setting toolbar as inputAccessoryView
        textField.inputAccessoryView = toolbar
    }
    
    @objc func doneButtonAction() {
        self.view.endEditing(true)
    }
}
