//
//  FormInteractor.swift
//  FinForm
//
//  Created by Gustavo Luís Soré on 23/07/2018.
//  Copyright (c) 2018 Sore. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FormBusinessLogic
{
  func fetchCells(request: Form.FetchCells.Request)
}

protocol FormDataStore
{
    var cells: [Cell] { get set }
}

class FormInteractor: FormBusinessLogic, FormDataStore
{
    
  var presenter: FormPresentationLogic?
  var worker: CellWorker?
    
    // MARK: Data Store
  var cells: [Cell] = []
  
  // MARK: Fetch Cells
    func fetchCells(request: Form.FetchCells.Request) {
        worker = CellWorker(cellEngine: CellRequester())
        worker?.fetchCells(completionHandler: { (result) in
            switch result{
            case .Success(let cells):
                let response = Form.FetchCells.Response.init(cells: cells, noInternt: false)
                self.cells = cells
                self.presenter?.presentFetchedCells(response: response)
            case .Failure(let error):
                switch error{
                case .RequestError(let requestRrror):
                    switch requestRrror{
                    case .NoInternetAcces:
                        let response = Form.FetchCells.Response.init(cells: [], noInternt: true)
                        self.presenter?.presentFetchedCells(response: response)
                    default:
                        let response = Form.FetchCells.Response.init(cells: [], noInternt: true)
                        self.presenter?.presentFetchedCells(response: response)
                        break
                    }
                    break
                default:
                    let response = Form.FetchCells.Response.init(cells: [], noInternt: false)
                    self.presenter?.presentFetchedCells(response: response)
                    break
                }
            }
        })
    }
}
