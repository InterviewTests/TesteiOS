//
//  FormPresenter.swift
//  FinForm
//
//  Created by Gustavo Luís Soré on 23/07/2018.
//  Copyright (c) 2018 Sore. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FormPresentationLogic
{
  func presentFetchedCells(response: Form.FetchCells.Response)
  func showHideCell(response: Form.ShowHideCell.Response)
  func validate(response: Form.Validate.Response)
  func restart(response: Form.Restart.Response)
}

class FormPresenter: FormPresentationLogic
{
    
  weak var viewController: FormDisplayLogic?
  
  // MARK: Present Fetched Cells
  func presentFetchedCells(response: Form.FetchCells.Response)
  {
    
    if response.noInternt{
        let viewModel = Form.FetchCells.ViewModel.init(cellsMetaData: [], noInternet: true)
        viewController?.displayFetchedCells(viewModel: viewModel)
        return
    }
    
    let arrayCellsMetaData:[CellMetaData] = sort(array: filterMetaDataArray(array: response.arrayMetaData))
    let viewModel = Form.FetchCells.ViewModel.init(cellsMetaData: arrayCellsMetaData, noInternet: false)
    viewController?.displayFetchedCells(viewModel: viewModel)
  }
    
    // MARK: Present Fetched Cells
    func showHideCell(response: Form.ShowHideCell.Response) {
        let viewModel = Form.ShowHideCell.ViewModel.init(cellMetaData: response.cellMetaData, index: response.index, show: response.show)
        viewController?.displayShowHideCell(viewModel: viewModel)
    }
    
    // MARK: Validation
    func validate(response: Form.Validate.Response){
        if let metaData = response.wrongMetaData{
            
            let title = String.loc("INVALID_FORM_ALERT_TITLE")
            var message:String = ""
            
            if metaData.fieldState == .Required{
                message = String.loc("INVALID_FORM_ALERT_MESSAGE_REQUIRED")
            } else if metaData.fieldState == .Invalid{
                message = String.loc("INVALID_FORM_ALERT_MESSAGE_INVALID")
            }
            
            if let fieldName = metaData.cell?.message{
                message = message.replacingOccurrences(of: "%", with: fieldName)
            }
            
            let viewModel = Form.Validate.ViewModel.init(success: false, validationProblemTitle: title, validationProblemMessage: message)
            viewController?.displayValidationResult(viewModel: viewModel)
        } else{
            let viewModel = Form.Validate.ViewModel.init(success: true, validationProblemTitle: nil, validationProblemMessage: nil)
            viewController?.displayValidationResult(viewModel: viewModel)
        }
    }
    
    // MARK: Restart
    func restart(response: Form.Restart.Response){
        var arrayCellsMetaData:[CellMetaData] = sort(array: filterMetaDataArray(array: response.arrayMetaData))
        arrayCellsMetaData = sort(array: arrayCellsMetaData)
        let viewModel = Form.Restart.ViewModel.init(arrayMetaData: arrayCellsMetaData)
        viewController?.displayRestart(viewModel: viewModel)
    }
    
    // MARK: Private utils methods
    
    private func filterMetaDataArray(array:[CellMetaData]) -> [CellMetaData]{
        var arrayCellsMetaData:[CellMetaData] = []
        for cellMetaData in array{
            if let cell = cellMetaData.cell{
                if cell.hidden == false{
                    arrayCellsMetaData.append(cellMetaData)
                }
            }
        }
        return arrayCellsMetaData
    }
    
    private func sort(array:[CellMetaData]) -> [CellMetaData]{
        for metaData in array{
            if let cell = metaData.cell{
                if let _ = cell.id{
                } else{return []}
            } else{return []}
        }
        return array.sorted(by: { $0.cell!.id! < $1.cell!.id! })
    }
}
