//
//  InvestmentViewController.swift
//  FinForm
//
//  Created by Gustavo on 25/07/18.
//  Copyright (c) 2018 Sore. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SafariServices

protocol InvestmentDisplayLogic: class
{
  func displayFetchedScreen(viewModel: Investment.FetchScreen.ViewModel)
}

class InvestmentViewController: UIViewController, InvestmentDisplayLogic
{
  var interactor: InvestmentBusinessLogic?
  var router: (NSObjectProtocol & InvestmentRoutingLogic & InvestmentDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = InvestmentInteractor()
    let presenter = InvestmentPresenter()
    let router = InvestmentRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    moreInfoTableViewHeightConstraint.constant = 0
    infoTableViewHeightConstraint.constant = 0
    customLoading = CustomLoading(view: view)
    customLoading.show()
    doFetchScreen()
  }
  
    @IBAction func test(_ sender: Any) {
    }
  
    // MARK: Properties
    @IBOutlet weak var moreInfoTableViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var infoTableViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var fundNameLabel: UILabel!
    @IBOutlet weak var riskView: RiskView!
    @IBOutlet weak var definitionLabel: UILabel!
    @IBOutlet weak var riskTitleLabel: UILabel!
    @IBOutlet weak var infoTitleLabel: UILabel!
    @IBOutlet weak var moreInfoTableView: UITableView!
    @IBOutlet weak var infoTableView: UITableView!
    @IBOutlet weak var whatIsLabel: UILabel!
    @IBOutlet weak var button: CustomButton!
    
    @IBOutlet weak var contentView: UIView!
    
    var customLoading:CustomLoading!
    
    var screenViewModel:Investment.FetchScreen.ViewModel!
    
    
// MARK: Fetch Screen
  func doFetchScreen()
  {
    let request = Investment.FetchScreen.Request()
    interactor?.fetchScreen(request: request)
  }
  
  func displayFetchedScreen(viewModel: Investment.FetchScreen.ViewModel)
  {
    
    DispatchQueue.main.async {
        
        self.customLoading.hide()
        
        if let screen = viewModel.screen{
            
            self.screenViewModel = viewModel
            self.configureView(screen: screen)
            
        } else{
            
            if let title = viewModel.alertTitle,let message = viewModel.alertMessage{
                let alert = UIAlertController.init(title: title, message: message, preferredStyle: UIAlertControllerStyle.alert)
                alert.addAction(UIAlertAction(title: "Ok", style: UIAlertActionStyle.default, handler: { (action) in
                    self.customLoading.show()
                    self.doFetchScreen()
                }))
                self.present(alert, animated: true, completion: nil)
            }
            
        }
    }
    
  }
    
    // MARK: Private Methods
    
    private func bindScreen(screen:Screen)
    {
        titleLabel.text = screen.title
        fundNameLabel.text = screen.fundName
        whatIsLabel.text = screen.whatIs
        definitionLabel.text = screen.definition
        riskTitleLabel.text = screen.riskTitle
        riskView.setRist(risk: screen.risk)
        infoTitleLabel.text = screen.infoTitle
    }
    
    private func configureView(screen:Screen)
    {
        contentView.isHidden = false
        bindScreen(screen: screen)
        
        configureTableViews(screen: screen)

    }
    
    private func configureTableViews(screen:Screen)
    {
        moreInfoTableView.delegate = self
        moreInfoTableView.dataSource = self
        moreInfoTableView.tag = 1001
        moreInfoTableView.separatorStyle = .none
        
        infoTableView.delegate = self
        infoTableView.dataSource = self
        infoTableView.tag = 1002
        infoTableView.separatorStyle = .none
        
        moreInfoTableViewHeightConstraint.constant = 4 * MoreInfoCell.height
        infoTableViewHeightConstraint.constant = CGFloat(screen.info.count + screen.downInfo.count) * InfoCell.height
        
        registerTableViewsNibs()
    }
    
    private func registerTableViewsNibs()
    {
        infoTableView.register(InfoCell.nib, forCellReuseIdentifier: InfoCell.identifier)
        infoTableView.register(DownInfoCell.nib, forCellReuseIdentifier: DownInfoCell.identifier)
        
        moreInfoTableView.register(MoreInfoCell.nib, forCellReuseIdentifier: MoreInfoCell.identifier)
    }
    
}

extension InvestmentViewController: UITableViewDelegate,UITableViewDataSource
{
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if let screen = screenViewModel.screen{
            if tableView.tag == 1001{
                
                return MoreInfoCell.height
                
            } else if tableView.tag == 1002{
                if indexPath.row < screen.info.count{
                    
                    return InfoCell.height
                    
                } else{
                    
                    return  DownInfoCell.height
                }
            }
        }
        return 0
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if let screen = screenViewModel.screen{
            if tableView.tag == 1001{
                return 4
            } else if tableView.tag == 1002{
                return screen.info.count + screen.downInfo.count
            }
        }
        return 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let screen = screenViewModel.screen{
            if tableView.tag == 1001{
                
                let cell = tableView.dequeueReusableCell(withIdentifier: MoreInfoCell.identifier, for: indexPath) as! MoreInfoCell
                
                if indexPath.row == 0{
                    
                    cell.populate(fundTitle: screenViewModel.fundTitle, cdiTitle: screenViewModel.cdiTitle)
                    
                } else{
                    
                    switch indexPath.row{
                    case 1:
                        cell.populate(title: screenViewModel.monthTitle, moreInfo: screen.moreInfo.month)
                    case 2:
                        cell.populate(title: screenViewModel.yearTitle, moreInfo: screen.moreInfo.year)
                    case 3:
                        cell.populate(title: screenViewModel.twelveMonthsTitle, moreInfo: screen.moreInfo.twelveMonths)
                    default:
                        break
                    }
                    
                }
                
                return cell
                
            } else if tableView.tag == 1002{
                
                if indexPath.row < screen.info.count{
                    
                    let cell = tableView.dequeueReusableCell(withIdentifier: InfoCell.identifier, for: indexPath) as! InfoCell
                    let info = screen.info[indexPath.row]
                    cell.populate(info: info)
                    return cell
                    
                } else{
                    
                    let cell = tableView.dequeueReusableCell(withIdentifier: DownInfoCell.identifier, for: indexPath) as! DownInfoCell
                    let downInfo = screen.downInfo[indexPath.row - screen.info.count]
                    cell.populate(info: downInfo)
                    cell.downloadCompletion = {
                        if let url = URL.init(string: "https://google.com"){
                            let safariWebView = SFSafariViewController(url: url)
                            self.present(safariWebView, animated: true, completion: nil)
                        }
                    }
                    return cell
                }
                
            }
        }
        return UITableViewCell()
    }
    
    
}
