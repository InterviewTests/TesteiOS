//
//  FundViewController.swift
//  Camila-TesteiOS
//
//  Created by camila oliveira on 20/04/18.
//  Copyright © 2018 Aliamcami. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FundDisplayLogic: class{
    func displayFunds(viewModel: FundModel.Screen.ViewModel)
}

class FundViewController: UIViewController, FundDisplayLogic{
    var interactor: FundBusinessLogic?
    var router: (NSObjectProtocol & FundRoutingLogic & FundDataPassing)?
    var displayedFunds: [Fund] = []
    @IBOutlet weak var bottoMenuStack: BottomMenuStack?
    @IBOutlet weak var navigationBar: UINavigationBar?
    
    @IBOutlet weak var tableView: UITableView!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder){
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup(){
        let viewController = self
        let interactor = FundInteractor()
        let presenter = FundPresenter()
        let router = FundRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?){
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad(){
        super.viewDidLoad()
        fechFunds()
    }
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func fechFunds(){
        let request = FundModel.Screen.Request()
        interactor?.fechFunds(request: request)
    }
    
    func displayFunds(viewModel: FundModel.Screen.ViewModel){
        displayedFunds = viewModel.funds
        tableView.reloadData()
    }
    
    //MARK:- IBActions
    @IBAction func contatoButtonClicked(_ sender: Any) {
        router?.routeBack()
    }
    
    @IBAction func btnShareClicked() {
//        let bounds = UIScreen.main.bounds
//        UIGraphicsBeginImageContextWithOptions(bounds.size, true, 0.0)
//        self.view.drawHierarchy(in: bounds, afterScreenUpdates: false)
//        let img = UIGraphicsGetImageFromCurrentImageContext()
//        UIGraphicsEndImageContext()

        let img = tableView.createImage()
        
        let objectsToShare = [img as Any]
        let activityVC = UIActivityViewController(activityItems: objectsToShare, applicationActivities: nil)
        activityVC.excludedActivityTypes = [UIActivityType.airDrop, UIActivityType.addToReadingList]
        self.present(activityVC, animated: true, completion: nil)
    }
    
}

extension FundViewController: UITableViewDataSource, UITableViewDelegate{
    func numberOfSections(in tableView: UITableView) -> Int {
        return 4
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch indexPath.section {
        case 0:
            switch indexPath.row {
            case 0,6: return 40
            case 1,3: return 80
            case 2,4,5: return 60
            default: return 30
            }
        default:
            return 45
        }
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard let screen = displayedFunds.first else{
            return 0
        }
        
        switch section  {
        case 0:
            return 7
        case 1:
            return 5
        case 2:
            return screen.info.count
        case 3:
            return screen.downInfo.count
        default:
            return 0
        }
    }
    
    //MARK:- Table view config
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell{
        guard let screen = displayedFunds.first else{
            return UITableViewCell()
        }
        
        switch indexPath.section {
        case 0: //Titles only
            if let cell = tableView.dequeueReusableCell(withIdentifier: "cell"){
                return firstSectionCell(item: indexPath.row, screen: screen, cell: cell)
            }
        case 1: //More Info
            if let cell = tableView.dequeueReusableCell(withIdentifier: "moreInfo") as? MoreInfoTableViewCell{
                return moreInfoSectionCell(item: indexPath.row, data: screen.moreInfo, cell: cell)
            }
        case 2: //Info
            if let cell = tableView.dequeueReusableCell(withIdentifier: "info"){
                return infoSectionCell(item: indexPath.row, data: screen.info, cell: cell)
            }
        case 3: //D Info
            if let cell = tableView.dequeueReusableCell(withIdentifier: "downInfo") as? DowninfoTableViewCell{
                return downInfoSectionCell(item: indexPath.row, data: screen.downInfo, cell: cell)
            }
        default:
            break
        }
        
        return UITableViewCell()
        
    }
    func downInfoSectionCell(item: Int, data: [Fund.DownInfoData], cell: DowninfoTableViewCell) -> DowninfoTableViewCell{
        guard let title = cell.title , data.count > item else {
            return cell
        }
        
        title.text = data[item].name
        title.font = AppFont.defaultFonts.text
        
        return cell
        
    }
    //SECTIONS
    func infoSectionCell(item: Int, data: [Fund.InfoData], cell: UITableViewCell)->UITableViewCell{
        guard let title = cell.textLabel, let detail = cell.detailTextLabel, data.count > item else {
            return cell
        }
        
        title.text = data[item].name
        title.font = AppFont.defaultFonts.text
        
        detail.text = data[item].data
        detail.font = AppFont.defaultFonts.text
        
        return cell
    }
    func moreInfoSectionCell(item: Int, data: Fund.MoreInfo, cell: MoreInfoTableViewCell)-> UITableViewCell{
        
        cell.fund.font = AppFont.defaultFonts.text
        cell.cid.font = AppFont.defaultFonts.text
        cell.title.font = AppFont.defaultFonts.text
        
        switch item {
        case 0:
            cell.title.text = nil
            cell.cid.text = "CDI"
            cell.cid.textColor = UIColor.lightGray
            cell.fund.text = "Fund"
            cell.fund.textColor = UIColor.lightGray
        case 1:
            cell.title.text = "No Mês"
            cell.cid.text = "\(data.month.CDI)%"
            cell.fund.text = "\(data.month.found)%"
        case 2:
            cell.title.text = "No Ano"
            cell.cid.text = "\(data.year.CDI)%"
            cell.fund.text = "\(data.year.found)%"
        case 3:
            cell.title.text = "12 meses"
            cell.cid.text = "\(data.months12.CDI)%"
            cell.fund.text = "\(data.months12.found)%"
        case 4:
            cell.title.text = ""
            cell.cid.text = ""
            cell.fund.text = ""
            
            let separatorView = UIView()
            separatorView.backgroundColor = UIColor.lightGray
            cell.contentView.addSubview(separatorView)
            
            separatorView.translatesAutoresizingMaskIntoConstraints = false
            separatorView.centerYAnchor.constraint(equalTo: cell.contentView.centerYAnchor).isActive = true
            separatorView.heightAnchor.constraint(equalToConstant: 1).isActive = true
            separatorView.trailingAnchor.constraint(equalTo: cell.contentView.trailingAnchor, constant: -16).isActive = true
            separatorView.leadingAnchor.constraint(equalTo: cell.contentView.leadingAnchor, constant: 16).isActive = true
            
        default:
            break
        }
        return cell
    }
    
    func firstSectionCell(item: Int, screen: Fund, cell: UITableViewCell)-> UITableViewCell{
        guard let label = cell.textLabel else {
            return cell
        }
        
        label.textAlignment = NSTextAlignment.center
        
        switch item {
        case 0:
            label.text = screen.title
            label.textColor = UIColor.lightGray
            label.font = AppFont.defaultFonts.titleSmall
        case 1:
            label.text = screen.fundName
            label.textColor = UIColor.darkGray
            label.font = AppFont.defaultFonts.titleBig
            label.lineBreakMode = NSLineBreakMode.byWordWrapping
            label.numberOfLines = 3
        case 2:
            let label = UILabel()
            label.text = screen.whatIs
            label.textColor = UIColor.gray
            label.font = AppFont.defaultFonts.titleSmall
            label.numberOfLines = 0
            label.sizeToFit()
            cell.contentView.addSubview(label)
            label.translatesAutoresizingMaskIntoConstraints = false
            label.centerXAnchor.constraint(equalTo: cell.contentView.centerXAnchor).isActive = true
            label.bottomAnchor.constraint(equalTo: cell.contentView.bottomAnchor).isActive = true
        case 3:
            label.text = screen.definition
            label.textColor = UIColor.lightGray
            label.font = AppFont.defaultFonts.textBig
            label.lineBreakMode = NSLineBreakMode.byWordWrapping
            label.numberOfLines = 5
        case 4:
            let label = UILabel()
            label.text = screen.riskTitle
            label.textColor = UIColor.gray
            label.font = AppFont.defaultFonts.titleSmall
            label.numberOfLines = 0
            label.sizeToFit()
            cell.contentView.addSubview(label)
            label.translatesAutoresizingMaskIntoConstraints = false
            label.centerXAnchor.constraint(equalTo: cell.contentView.centerXAnchor).isActive = true
            label.bottomAnchor.constraint(equalTo: cell.contentView.bottomAnchor).isActive = true
        case 5:
            let imgName = "InvestimentoLvl-\(screen.risk)"
            let img = UIImage(named: imgName)
            let imgview = UIImageView(image: img)
            imgview.contentMode = UIViewContentMode.scaleAspectFit
            
            cell.contentView.addSubview(imgview)
            imgview.translatesAutoresizingMaskIntoConstraints = false
            imgview.centerXAnchor.constraint(equalTo: cell.contentView.centerXAnchor).isActive = true
            imgview.centerYAnchor.constraint(equalTo: cell.contentView.centerYAnchor).isActive = true
        case 6:
            label.text = screen.infoTitle
            label.textColor = UIColor.gray
            label.font = AppFont.defaultFonts.titleSmall
        default:
            return cell
        }
        
        return cell
    }
}
