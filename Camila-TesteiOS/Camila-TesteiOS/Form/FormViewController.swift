//
//  FormViewController.swift
//  Camila-TesteiOS
//
//  Created by camila oliveira on 20/04/18.
//  Copyright Â© 2018 Aliamcami. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FormDisplayLogic: class{
    func displayCells(viewModel: FormModels.FetchCell.ViewModel)
}

class FormViewController: UIViewController, FormDisplayLogic{
    @IBOutlet weak var navigationBar: UINavigationBar?
    @IBOutlet weak var tableView: UITableView?
    @IBOutlet weak var bottoMenuStack: BottomMenuStack?
    
    var interactor: FormBusinessLogic?
    var router: (NSObjectProtocol & FormRoutingLogic & FormDataPassing)?
    var displayedCells = [Cell]()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder){
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup(){
        let viewController = self
        let interactor = FormInteractor()
        let presenter = FormPresenter()
        let router = FormRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?){
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad(){
        super.viewDidLoad()
        fetchCells()
        tableView?.allowsSelection = false
    }
    
    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        //layout
        bottoMenuStack?.setContatoOn(true)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
    }
    
    
    // MARK: Fetch Cells
    
    func fetchCells(){
        self.interactor?.fetchCells(request: FormModels.FetchCell.Request())
    }
    
    func displayCells(viewModel: FormModels.FetchCell.ViewModel){
        displayedCells = viewModel.displayedCells
        tableView?.reloadData()
    }
    
    
    @IBAction func investimentoButtonClicked(_ sender: Any) {
        router?.routeToInvestimentos(segue: nil)
    }
}

extension FormViewController: UINavigationBarDelegate {
    public func position(for bar: UIBarPositioning) -> UIBarPosition {
        return .topAttached
    }
}

extension FormViewController: UITableViewDelegate{
    public func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat{
        guard displayedCells.count > indexPath.item else{
            return 0
        }
        
        let visible = CGFloat(visibleCells)
        let topSpacingAll = self.topSpacingAll
        let cell = displayedCells[indexPath.item]
        
        guard cell.hidden == false else{
            return 0
        }
        
        let hight = ((tableView.frame.height - topSpacingAll) / CGFloat(visible)) + CGFloat(cell.topSpacing)
        let minimum = 50 + CGFloat(cell.topSpacing)
        return hight < minimum ? minimum : hight
    }
    
    //MARK:- userfull functions
    
    func showCell(_ state: Bool = true, withId id: Int?){
        guard let id = id else {
            return
        }
        
        for cell in displayedCells{
            if cell.id == id{
                cell.hidden = !state
            }
        }
        
        tableView?.reloadData()
    }
    
    var topSpacingAll: CGFloat{
        var count: CGFloat = 0
        for i in displayedCells{
            count += CGFloat(i.topSpacing)
        }
        return count
    }
    
    var visibleCells: Int{
        var count = 0
        for i in displayedCells{
            if !i.hidden{
                count += 1
            }
        }
        return count == 0 ? 1 : count
    }
}

extension FormViewController: UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedCells.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard displayedCells.count > indexPath.item else{
            return UITableViewCell()
        }
        
        let cellConfig = displayedCells[indexPath.item]
        var nibCell: (CellProtocol & UITableViewCell)?
        
        switch cellConfig.type {
        case .field:
            nibCell =  UINib(nibName: "FieldTableViewCell", bundle: nil).instantiate(withOwner: self, options: nil).first as? CellProtocol & UITableViewCell
            
        case .text:
            nibCell =  UINib(nibName: "TextTableViewCell", bundle: nil).instantiate(withOwner: self, options: nil).first as? CellProtocol & UITableViewCell
        
        case .send:
            nibCell =  UINib(nibName: "SendTableViewCell", bundle: nil).instantiate(withOwner: self, options: nil).first as? CellProtocol & UITableViewCell
        
        case .checkbox:
            nibCell =  UINib(nibName: "CheckboxTableViewCell", bundle: nil).instantiate(withOwner: self, options: nil).first as? CellProtocol & UITableViewCell
           
            (nibCell as? CheckboxTableViewCell)?.checkBoxChanged = {selected in
                self.showCell(selected, withId: cellConfig.show)
                //save state
                
            }
        
        default:
            return UITableViewCell()
        }
        
        //setup cells
        if var nibCell = nibCell {
            nibCell.cell = cellConfig
            nibCell.setup()
            return nibCell
        }
        
        return UITableViewCell()
    }

}
