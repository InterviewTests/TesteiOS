//
//  InvestmentsViewController.swift
//  Floating Mountain
//
//  Created by Leonardo Oliveira on 14/09/18.
//  Copyright (c) 2018 Leonardo Oliveira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol InvestmentsDisplayLogic: class {
    func displayInvestments(viewModel: Investments.FetchInvestments.ViewModel)
    func displayError(error: Error)
}

class InvestmentsViewController: UITableViewController, InvestmentsDisplayLogic {
    
    // MARK: - Instance variables
    
    var interactor: InvestmentsBusinessLogic?
    var router: (NSObjectProtocol & InvestmentsRoutingLogic & InvestmentsDataPassing)?
    
    // MARK: Outlets
    
    @IBOutlet weak var fundTitleLabel: UILabel!
    @IBOutlet weak var fundNameLabel: UILabel!
    @IBOutlet weak var whatIsLabel: UILabel!
    @IBOutlet weak var definitionLabel: UILabel!
    @IBOutlet weak var riskTitleLabel: UILabel!
    @IBOutlet weak var riskBarView: RiskBarView!
    @IBOutlet weak var infoTitleLabel: UILabel!
    @IBOutlet weak var monthFundLabel: UILabel!
    @IBOutlet weak var monthCDILabel: UILabel!
    @IBOutlet weak var yearFundLabel: UILabel!
    @IBOutlet weak var yearCDILabel: UILabel!
    @IBOutlet weak var twelveFundLabel: UILabel!
    @IBOutlet weak var twelveCDILabel: UILabel!
    
    // MARK: - Object lifecycle
    
    override init(style: UITableView.Style) {
        super.init(style: style)
        setup()
    }
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = InvestmentsInteractor()
        let presenter = InvestmentsPresenter()
        let router = InvestmentsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        fetchInvestments()
    }
    
    var infosViewModel: [Investments.FetchInvestments.ViewModel.InfoViewModel] = []
    
    func fetchInvestments() {
        let request = Investments.FetchInvestments.Request()
        interactor?.fetch(request: request)
    }
    
    func displayInvestments(viewModel: Investments.FetchInvestments.ViewModel) {
        fundTitleLabel.text = viewModel.title
        fundNameLabel.text = viewModel.fundName
        whatIsLabel.text = viewModel.whatIs
        definitionLabel.text = viewModel.definition
        riskTitleLabel.text = viewModel.riskTitle
        riskBarView.currentRisk = viewModel.risk
        infoTitleLabel.text = viewModel.infoTitle
        monthFundLabel.text = viewModel.moreInfo.month.fund
        monthCDILabel.text = viewModel.moreInfo.month.cdi
        yearFundLabel.text = viewModel.moreInfo.year.fund
        yearCDILabel.text = viewModel.moreInfo.year.cdi
        twelveFundLabel.text = viewModel.moreInfo.twelveMonths.fund
        twelveCDILabel.text = viewModel.moreInfo.twelveMonths.cdi
        infosViewModel = viewModel.info + viewModel.downInfo
        tableView.reloadData()
    }
    
    func displayError(error: Error) {
        let alert = UIAlertController(title: "Erro", message: error.localizedDescription, preferredStyle: .alert)
        alert.addAction(.init(title: "OK", style: .default, handler: nil))
        present(alert, animated: true, completion: nil)
    }
    
    // MARK: - Table view data source
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return infosViewModel.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath)
        let info = infosViewModel[indexPath.row]
        cell.textLabel?.text = info.name
        cell.detailTextLabel?.text = info.data
        return cell
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
}
