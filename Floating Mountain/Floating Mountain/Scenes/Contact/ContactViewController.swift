//
//  ContactViewController.swift
//  Floating Mountain
//
//  Created by Leonardo Oliveira on 9/14/18.
//  Copyright (c) 2018 Leonardo Oliveira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ContactDisplayLogic: class {
    func displayForm(viewModel: Contact.FetchForm.ViewModel)
    func displayError(error: Error?)
    func displayContactSuccess()
    func display(viewModel: Contact.ChangeVisibilityOfField.ViewModel)
}

class ContactViewController: UIViewController, ContactDisplayLogic, FormCellSendButtonViewDelegate, FormCellCheckboxViewDelegate {
    
    // MARK: - Instance variables
    
    var interactor: ContactBusinessLogic?
    var router: (NSObjectProtocol & ContactRoutingLogic & ContactDataPassing)?
    
    // MARK: Outlets
    
    @IBOutlet weak var formStackView: UIStackView!
    @IBOutlet weak var scrollView: UIScrollView!
    
    // MARK: Lazy initialization
    
    lazy var keyboardScrollViewHandler = KeyboardScrollViewHandler(scrollView: scrollView)
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ContactInteractor()
        let presenter = ContactPresenter()
        let router = ContactRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        fetchForm()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        keyboardScrollViewHandler.registerForKeyboardNotifications()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        keyboardScrollViewHandler.unregisterForKeyboardNotifications()
    }
    
    // MARK: - Form send button 
    
    func formCell(_ formCell: FormCellSendButtonView, didTapSendButton button: UIButton) {
        if formStackView.arrangedSubviews.contains(where: { view in !((view as? FormCellView)?.isValid() ?? true) }) {
            return
        }
        sendForm()
    }
    
    // MARK: - Form checkbox
    
    func formCellCheckbox(_ formCellCheckbox: FormCellCheckboxView, didChangeSelection selected: Bool) {
        let request = Contact.ChangeVisibilityOfField.Request(identifier: formCellCheckbox.showIdentifier, visibility: selected)
        perform(request: request)
    }
    
    // MARK: - Fetch Form
    
    func fetchForm() {
        let request = Contact.FetchForm.Request()
        interactor?.fetchForm(request: request)
    }
    
    func displayForm(viewModel: Contact.FetchForm.ViewModel) {
        viewModel.cells.forEach { (cell) in
            let view: FormCellView
            switch cell.type {
            case .textField:
                view = FormCellTextFieldView()
                break
            case .label:
                view = FormCellLabelView()
                break
            case .image:
                view = FormCellImageView()
                break
            case .checkbox:
                let checkboxButton = FormCellCheckboxView()
                checkboxButton.delegate = self
                view = checkboxButton
                break
            case .send:
                let sendButton = FormCellSendButtonView()
                sendButton.delegate = self
                view = sendButton
                break
            }
            view.setup(for: cell)
            formStackView.addArrangedSubview(view)
        }
    }
    
    func displayError(error: Error?) {
        let alert = UIAlertController(title: "Erro", message: error?.localizedDescription, preferredStyle: .alert)
        alert.addAction(.init(title: "OK", style: .default, handler: nil))
        present(alert, animated: true, completion: nil)
    }
    
    func displayContactSuccess() {
        performSegue(withIdentifier: "ContactSuccess", sender: nil)
    }
    
    func perform(request: Contact.ChangeVisibilityOfField.Request) {
        interactor?.perfom(request: request)
    }
    
    func display(viewModel: Contact.ChangeVisibilityOfField.ViewModel) {
        guard let view = formStackView.arrangedSubviews.first(where: { (view) -> Bool in
            return view is FormCellView && (view as! FormCellView).identifier == viewModel.identifier
        }), view.isHidden == viewModel.visible else {
            return
        }
        UIView.animate(withDuration: 0.3) {
            view.isHidden = !viewModel.visible
        }
    }
    
    func sendForm() {
        interactor?.sendForm()
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
}
