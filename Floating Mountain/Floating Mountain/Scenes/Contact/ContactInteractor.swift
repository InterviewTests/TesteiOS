//
//  ContactInteractor.swift
//  Floating Mountain
//
//  Created by Leonardo Oliveira on 9/14/18.
//  Copyright (c) 2018 Leonardo Oliveira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

protocol ContactBusinessLogic {
    func fetchForm(request: Contact.FetchForm.Request)
    func sendForm(request: Contact.SendForm.Request)
    func perfom(request: Contact.ChangeVisibilityOfField.Request)
}

protocol ContactDataStore {
    
}

class ContactInteractor: ContactBusinessLogic, ContactDataStore {
    var presenter: ContactPresentationLogic?
    lazy var worker = ContactWorker()
    
    func fetchForm(request: Contact.FetchForm.Request) {
        worker.fetchForm(request: request, completion: { [weak self] (form, error) in
            let response = Contact.FetchForm.Response(form: form, error: error)
            self?.presenter?.presentForm(response: response)
        })
    }
    
    func sendForm(request: Contact.SendForm.Request) {
        worker.sendForm(request: request) { [weak self] in
            let response = Contact.SendForm.Response()
            self?.presenter?.presentContactSuccess(response: response)
        }
    }
    
    func perfom(request: Contact.ChangeVisibilityOfField.Request) {
        guard let identifier = request.identifier else { return }
        let response = Contact.ChangeVisibilityOfField.Response(identifier: identifier, visibility: request.visibility)
        presenter?.present(response: response)
    }
    
}
