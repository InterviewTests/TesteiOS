//
//  ContactViewControllerTests.swift
//  Floating Mountain
//
//  Created by Leonardo Oliveira on 9/16/18.
//  Copyright (c) 2018 Leonardo Oliveira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Floating_Mountain
import XCTest

class ContactViewControllerTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: ContactViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupContactViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupContactViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "ContactViewController") as? ContactViewController
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class ContactBusinessLogicSpy: ContactBusinessLogic {
        var fetchFormCalled = false
        var sendFormCalled = false
        var changeVisibilityOfFieldCalled = false
        
        func fetchForm(request: Contact.FetchForm.Request) {
            fetchFormCalled = true
        }
        
        func sendForm() {
            sendFormCalled = true
        }
        
        func changeVisibilityOfField(with identifier: Int?, to visibility: Bool) {
            changeVisibilityOfFieldCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldFetchFormWhenViewIsLoaded() {
        // Given
        let spy = ContactBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.fetchFormCalled, "viewDidLoad() should ask the interactor to do something")
    }
    
    func testDisplayForm() {
        // Given
        let viewModel = Contact.FetchForm.ViewModel(cells: [Contact.FetchForm.ViewModel.CellViewModel(
            id: 1,
            type: .textField,
            message: "message",
            typefield: .text,
            hidden: false,
            topSpacing: 20,
            show: nil,
            required: true)])
        // When
        loadView()
        sut.displayForm(viewModel: viewModel)
        
        // Then
        XCTAssertEqual(sut.formStackView.arrangedSubviews.count, 1, "displayForm(viewModel:) should update the form stack view")
        XCTAssertEqual((sut.formStackView.arrangedSubviews[0] as! FormCellTextFieldView).textField.placeholder, "message", "displayForm(viewModel:) should update the form stack view")
    }
    
    func testSendForm() {
        
        // Given
        let spy = ContactBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        sut.sendForm()
        
        // Then
        XCTAssertTrue(spy.sendFormCalled)
    }
    
    func testChangeVisibilityOfField() {
        
        // Given
        let spy = ContactBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        let id: Int? = 1
        sut.changeVisibilityOfField(with: id, to: true)
        
        // Then
        XCTAssertTrue(spy.changeVisibilityOfFieldCalled)
    }
}
