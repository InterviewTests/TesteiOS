//
//  ContactPresenterTests.swift
//  Floating Mountain
//
//  Created by Leonardo Oliveira on 9/16/18.
//  Copyright (c) 2018 Leonardo Oliveira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Floating_Mountain
import XCTest

class ContactPresenterTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: ContactPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupContactPresenter()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupContactPresenter() {
        sut = ContactPresenter()
    }
    
    // MARK: Test doubles
    
    class ContactDisplayLogicSpy: ContactDisplayLogic {
        var displayFormCalled = false
        var displayErrorCalled = false
        var displayContactSuccessCalled = false
        var changeVisibilityOfFieldCalled = false
        
        func displayForm(viewModel: Contact.FetchForm.ViewModel) {
            displayFormCalled = true
        }
        
        func displayError(error: Error?) {
            displayErrorCalled = true
        }
        
        func displayContactSuccess(viewModel: Contact.SendForm.ViewModel) {
            displayContactSuccessCalled = true
        }
        
        func display(viewModel: Contact.ChangeVisibilityOfField.ViewModel) {
            changeVisibilityOfFieldCalled = true
        }
    }
    
    // MARK: Tests
    
    func testPresentForm() {
        // Given
        let spy = ContactDisplayLogicSpy()
        sut.viewController = spy
        let response = Contact.FetchForm.Response(form: Form(cells: [Form.Cell(
            id: 1,
            type: .textField,
            message: "message",
            typefield: .text,
            hidden: false,
            topSpacing: 20,
            show: nil,
            required: true)]), error: nil)
        
        // When
        sut.presentForm(response: response)
        
        // Then
        XCTAssertTrue(spy.displayFormCalled, "presentForm(response:) should ask the view controller to display the result")
    }
    
    func testPresentError() {
        // Given
        let spy = ContactDisplayLogicSpy()
        sut.viewController = spy
        let response = Contact.FetchForm.Response(form: nil, error: FakeError.fake)
        
        // When
        sut.presentForm(response: response)
        
        // Then
        XCTAssertTrue(spy.displayErrorCalled, "presentForm(response:) should ask the view controller to display the result")
    }
    
    func testPresentContactSuccess() {
        // Given
        let spy = ContactDisplayLogicSpy()
        sut.viewController = spy
        let response = Contact.SendForm.Response()
        // When
        sut.presentContactSuccess(response: response)
        
        // Then
        XCTAssertTrue(spy.displayContactSuccessCalled, "presentContactSuccess() should ask the view controller to display the result")
    }
    
    func testChangeVisibility() {
        // Given
        let spy = ContactDisplayLogicSpy()
        sut.viewController = spy
        let response = Contact.ChangeVisibilityOfField.Response(identifier: 1, visibility: true)
        // When
        sut.present(response: response)
        
        // Then
        XCTAssertTrue(spy.changeVisibilityOfFieldCalled, "changeVisibilityOfField(with:to:) should ask the view controller to display the result")
    }
}
