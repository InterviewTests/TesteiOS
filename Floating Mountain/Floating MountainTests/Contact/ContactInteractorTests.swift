//
//  ContactInteractorTests.swift
//  Floating Mountain
//
//  Created by Leonardo Oliveira on 9/16/18.
//  Copyright (c) 2018 Leonardo Oliveira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Floating_Mountain
import XCTest

class ContactInteractorTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: ContactInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupContactInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupContactInteractor() {
        sut = ContactInteractor()
    }
    
    // MARK: Test doubles
    
    class ContactPresentationLogicSpy: ContactPresentationLogic {
        var presentFormCalled = false
        var presentContactSuccessCalled = false
        var changeVisibilityOfFieldCalled = false
        
        func presentForm(response: Contact.FetchForm.Response) {
            presentFormCalled = true
        }
        
        func presentContactSuccess(response: Contact.SendForm.Response) {
            presentContactSuccessCalled = true
        }
        
        func present(response: Contact.ChangeVisibilityOfField.Response) {
            changeVisibilityOfFieldCalled = true
        }
        
    }
    
    // MARK: Tests
    
    func testPresentForm() {
        // Given
        let spy = ContactPresentationLogicSpy()
        sut.presenter = spy
        let request = Contact.FetchForm.Request()
        
        // When
        sut.fetchForm(request: request)
        
        // Then
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
            XCTAssertTrue(spy.presentFormCalled, "fetchForm(request:) should ask the presenter to format the result")
        }
        
    }
    
    func testSendForm() {
        // Given
        let spy = ContactPresentationLogicSpy()
        sut.presenter = spy
        let request = Contact.SendForm.Request()
        // When
        sut.sendForm(request: request)
        
        // Then
        XCTAssertTrue(spy.presentContactSuccessCalled, "sendForm() should ask the presenter to format the result")
    }
    
    func testChangeVisibility() {
        // Given
        let spy = ContactPresentationLogicSpy()
        sut.presenter = spy
        let request = Contact.ChangeVisibilityOfField.Request(identifier: 1, visibility: true)
        // When
        sut.perfom(request: request)
        
        // Then
        XCTAssertTrue(spy.changeVisibilityOfFieldCalled, "changeVisibilityOfField(with:to:) should ask the presenter to format the result")
    }
    
}
