//
//  ContactFormViewController.swift
//  iOSTest
//
//  Created by erick.peripolli on 30/07/18.
//  Copyright (c) 2018 Erick Peripolli. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ContactFormDisplayLogic: class {
    func displaySomething(viewModel: [ContactForm.GetContactCells.ViewModel])
}
enum Type: Int {
    case field = 1
    case text = 2
    case image = 3
    case checkbox = 4
    case send = 5
}

enum TypeField: Int {
    case text = 1
    case telNumber = 2
    case email = 3
    case null = 100
}

class ContactFormViewController: UIViewController, ContactFormDisplayLogic, UITableViewDataSource, UITableViewDelegate, CheckboxDelegate {
    
    var interactor: ContactFormBusinessLogic?
    var router: (NSObjectProtocol & ContactFormRoutingLogic & ContactFormDataPassing)?
    
    @IBOutlet weak var tableView: UITableView!
    var cellsViewModels: [ContactForm.GetContactCells.ViewModel]? {
        didSet {
            self.tableView.reloadData()
        }
    }
    
    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = ContactFormInteractor()
        let presenter = ContactFormPresenter()
        let router = ContactFormRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        getContactCells()
        self.tableView.dataSource = self
        self.tableView.delegate = self
    }
    
    // MARK: Do something
    
    func getContactCells() {
        let request = ContactForm.GetContactCells.Request()
        interactor?.doSomething(request: request)
    }
  
    func displaySomething(viewModel: [ContactForm.GetContactCells.ViewModel]) {
        DispatchQueue.main.async {
            self.cellsViewModels = viewModel
        }
    }
    
    // MARK: TableViewDataSource
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if let count = cellsViewModels?.count {
            return count
        }
        return 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cells = cellsViewModels else {
            return UITableViewCell()
        }
        if !cells[indexPath.row].hidden {
            if cells[indexPath.row].type == .text {
                let cell = tableView.dequeueReusableCell(withIdentifier: "LabelCell", for: indexPath) as! LabelTableViewCell
                cell.setCell(text: cells[indexPath.row].message)
                return cell
            } else if cells[indexPath.row].type == .field {
                let cell = tableView.dequeueReusableCell(withIdentifier: "TextFieldCell", for: indexPath) as! TextFieldTableViewCell
                cell.setCell(placeholderText: cells[indexPath.row].message)
                cell.textField?.text = ""
                return cell
            } else if cells[indexPath.row].type == .checkbox {
                let cell = tableView.dequeueReusableCell(withIdentifier: "CheckboxCell", for: indexPath) as! CheckboxTableViewCell
                cell.setCell(description: cells[indexPath.row].message, delegate: self, showId: cells[indexPath.row].show!)
                
                return cell
            } else if cells[indexPath.row].type == .send {
                let cell = tableView.dequeueReusableCell(withIdentifier: "ButtonCell", for: indexPath) as! ButtonTableViewCell
                cell.setCell(title: cells[indexPath.row].message)
                return cell
            }
        }
        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        guard let cells = cellsViewModels else {
            return 0
        }
        
        if cells[indexPath.row].hidden {
            return 0
        } else {
            return 50
        }
    }
    
    // MARK: Cells Delegates
    func checkBoxTapped(isChecked: Bool, cellID: Int) {
        if isChecked {
            let index = cellsViewModels?.index(where: {$0.id == cellID})
            if let index = index {
                cellsViewModels?[index] = ContactForm.GetContactCells.ViewModel(id: cellsViewModels![index].id, type: cellsViewModels![index].type, message: cellsViewModels![index].message, typefield: cellsViewModels![index].typefield, hidden: false, topSpacing: cellsViewModels![index].topSpacing, show: cellsViewModels![index].show, required: cellsViewModels![index].required)
            }
        } else {
            let index = cellsViewModels?.index(where: {$0.id == cellID})
            if let index = index {
                cellsViewModels?[index] = ContactForm.GetContactCells.ViewModel(id: cellsViewModels![index].id, type: cellsViewModels![index].type, message: cellsViewModels![index].message, typefield: cellsViewModels![index].typefield, hidden: true, topSpacing: cellsViewModels![index].topSpacing, show: cellsViewModels![index].show, required: cellsViewModels![index].required)
            }
        }
    }
}
