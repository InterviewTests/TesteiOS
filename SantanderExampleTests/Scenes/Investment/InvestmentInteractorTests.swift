//
//  InvestmentInteractorTests.swift
//  SantanderExample
//
//  Created by Luan Henrique Damasceno Costa on 13/05/2018.
//  Copyright (c) 2018 Luan Henrique Damasceno Costa. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import SantanderExample
import XCTest

class InvestmentInteractorTests: XCTestCase {
  // MARK: Subject under test
  
  var sut: InvestmentInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp(){
    super.setUp()
    setupInvestmentInteractor()
  }
  
  override func tearDown(){
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupInvestmentInteractor(){
    sut = InvestmentInteractor()
  }
  
  // MARK: Test doubles
  
  class InvestmentPresentationLogicSpy: InvestmentPresentationLogic {
    var presentGetInvestmentCalled = false
    var presentFetchedErrorCalled = false
    
    func presentFetchedInvestment(response: Investment.GetInvestment.Response) {
      presentGetInvestmentCalled = true
    }
    
    func presentFetchedError(response: Investment.GetInvestment.ErrorResponse) {
       presentFetchedErrorCalled = true
    }
  }
  
  class InvestmentWorkerSpy: InvestmentWorker {
    
    override func getInvestment(onSuccess: @escaping (InvestmentFundResponse) -> Void, onFailure: @escaping (ServiceError) -> Void) {
      onSuccess(InvestmentFundResponse())
    }
  }
  
  class InvestmentWorkerErrorSpy: InvestmentWorker {
    override func getInvestment(onSuccess: @escaping (InvestmentFundResponse) -> Void, onFailure: @escaping (ServiceError) -> Void) {
      onFailure(ServiceError.businessError(BusinessError(code: "0", text: "", title: "")))
    }
  }
  
  // MARK: Tests
  
  func testPresentFetchedInvestment() {
    // Given
    let spy = InvestmentPresentationLogicSpy()
    let worker = InvestmentWorkerSpy()
    sut.presenter = spy
    sut.worker = worker
    
    // When
    sut.fetchInvestment()
    
    // Then
    XCTAssertTrue(spy.presentGetInvestmentCalled, "doSomething(request:) should ask the presenter to format the result")
  }
  
  func testPresentErrorFetchedInvestment() {
    // Given
    let spy = InvestmentPresentationLogicSpy()
    let worker = InvestmentWorkerErrorSpy()
    sut.presenter = spy
    sut.worker = worker
    
    sut.fetchInvestment()
    
    XCTAssertTrue(spy.presentFetchedErrorCalled, "doSomething(request:) should ask the presenter to format the result")
  }
}
