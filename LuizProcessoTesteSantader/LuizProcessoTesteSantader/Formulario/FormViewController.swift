//
//  FormViewController.swift
//  LuizProcessoTesteSantader
//
//  Created by Luiz Otavio Processo on 26/09/19.
//  Copyright (c) 2019 Luiz Otavio Processo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FormDisplayLogicProtocol: class{
  func displayViewInfo(viewModel: Form.UserInfo.ViewModel)
}

class FormViewController: UIViewController{
    var interactor: FormBusinessLogicProtocol?
    var router: (NSObjectProtocol & FormRoutingLogicProtocol & FormDataPassingProtocol)?
    var formView:FormView?
    var infoForView:[ViewInfoObj] = []
    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }

  required init?(coder aDecoder: NSCoder){
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: View lifecycle

  override func viewDidLoad(){
    super.viewDidLoad()
    
    formView = FormView(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: self.view.frame.height))
    self.view = formView
    
    formView!.table.register(SendTableViewCell.self, forCellReuseIdentifier: SendTableViewCell.identifier)
    formView!.table.register(TxtFieldTableViewCell.self, forCellReuseIdentifier: TxtFieldTableViewCell.identifier)
    formView!.table.delegate = self
    formView!.table.dataSource = self
    
    formView?.investBtn.addTarget(self, action: #selector(routingToInvestiment), for: .touchUpInside)
    navigationItem.leftBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: self, action: nil)
    loadFormData()
  }
    
    // MARK: Setup
    
    private func setup(){
        let viewController = self
        self.title = "Contato"
        let interactor = FormInteractor()
        let presenter = FormPresenter()
        let router = FormRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
    }
    
    // MARK: Routing
    
    @objc func routingToInvestiment(){
        router?.routeToInvestiment()
    }
    
    @objc func routingToMessage(){
        router?.routeToMessage()
    }
     
  // MARK: Do something
  
  func loadFormData(){
    let request = Form.UserInfo.Request()
    interactor?.getFormData(request: request)
  }
}

extension FormViewController:FormDisplayLogicProtocol{
   
  func displayViewInfo(viewModel: Form.UserInfo.ViewModel){
    infoForView = viewModel.infos
    formView?.table.reloadData()
  }
}

extension FormViewController: UITableViewDelegate, UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 4
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

        if(infoForView.count > 0){
            
            switch indexPath.row {
            case 0:
                let cell = tableView.dequeueReusableCell(withIdentifier: TxtFieldTableViewCell.identifier, for: indexPath) as? TxtFieldTableViewCell
                   cell?.txtField.placeholder = infoForView[1].message
                return cell ?? UITableViewCell()
            case 1:
               let cell = tableView.dequeueReusableCell(withIdentifier: TxtFieldTableViewCell.identifier, for: indexPath) as? TxtFieldTableViewCell
                cell?.txtField.placeholder = infoForView[2].message
                return cell ?? UITableViewCell()
            case 2:
                let cell = tableView.dequeueReusableCell(withIdentifier: TxtFieldTableViewCell.identifier, for: indexPath) as? TxtFieldTableViewCell
                cell?.txtField.placeholder = infoForView[3].message
                return cell ?? UITableViewCell()
            case 3:
                let cell = tableView.dequeueReusableCell(withIdentifier: SendTableViewCell.identifier, for: indexPath) as? SendTableViewCell
                cell?.label.text = infoForView[4].message
                cell?.sendBtn.setTitle(infoForView[5].message, for: .normal)
                cell?.sendBtn.addTarget(self, action: #selector(routingToMessage), for: .touchUpInside)
                
                return cell ?? UITableViewCell()
            default:
                break
            }
            
            return UITableViewCell()

        }else{
            return UITableViewCell()
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if(indexPath.row == 3){
            return 200
        }
        return 70
    }
}
