//
//  InvestViewController.swift
//  LuizProcessoTesteSantader
//
//  Created by Luiz Otavio Processo on 27/09/19.
//  Copyright (c) 2019 Luiz Otavio Processo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SafariServices

protocol InvestDisplayLogicProtocol: class
{
  func displayInvestData(viewModel: Invest.InvestInfo.ViewModel)
}

class InvestViewController: UIViewController, SFSafariViewControllerDelegate{
    var interactor: InvestBusinessLogicProtocol?
    var router: (NSObjectProtocol & InvestRoutingLogicProtocol & InvestDataPassingProtocol)?
    var investView:InvestView?
    var investInfo:InvestViewInfo?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder){
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup(){
    let viewController = self
    self.title = "Investimento"
    let interactor = InvestInteractor()
    let presenter = InvestPresenter()
    let router = InvestRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
    
    @objc func routingToForm(){
        router?.routeToForm()
    }
  
  // MARK: View lifecycle
  
  override func viewDidLoad(){
    super.viewDidLoad()
    
    investView = InvestView(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: self.view.frame.height))
    self.view = investView
    
    investView!.table.register(HeaderTableViewCell.self, forCellReuseIdentifier: HeaderTableViewCell.identifier)
    investView!.table.register(RiskTableViewCell.self, forCellReuseIdentifier: RiskTableViewCell.identifier)
    investView!.table.register(ReturnTableViewCell.self, forCellReuseIdentifier: ReturnTableViewCell.identifier)
    investView!.table.register(InvestInfoTableViewCell.self, forCellReuseIdentifier: InvestInfoTableViewCell.identifier)
    investView!.table.register(InvestMoreInfoTableViewCell.self, forCellReuseIdentifier: InvestMoreInfoTableViewCell.identifier)
    investView!.table.register(InvestBtnTableViewCell.self, forCellReuseIdentifier: InvestBtnTableViewCell.identifier)
    
    investView!.table.delegate = self
    investView!.table.dataSource = self
    
    investView?.contactBtn.addTarget(self, action: #selector(routingToForm), for: .touchUpInside)
    navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: .action, target: self, action: nil)
    navigationItem.rightBarButtonItem?.tintColor = .appRed
    navigationItem.leftBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: self, action: nil)
    
    loadInvestData()
  }
  
  // MARK: Do something
  func loadInvestData(){
    let request = Invest.InvestInfo.Request()
    interactor?.getInvestmentData(request: request)
  }
    
    @objc func openSafari(){
        let safariViewController = SFSafariViewController(url: NSURL(string: "https://www.google.com")! as URL)
        safariViewController.delegate = self
        self.present(safariViewController, animated: true, completion: nil)
    }
}
extension InvestViewController: InvestDisplayLogicProtocol{
    
    func displayInvestData(viewModel: Invest.InvestInfo.ViewModel){
        investInfo = viewModel.investInfo
        investView?.table.reloadData()
    }
}

extension InvestViewController: UITableViewDelegate, UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 18
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        if(investInfo != nil){
            
            switch indexPath.row {
            case 0:
                let cell = tableView.dequeueReusableCell(withIdentifier: HeaderTableViewCell.identifier, for: indexPath) as? HeaderTableViewCell
                cell?.upperTitle.text = investInfo?.screen?.title
                cell?.title.text = investInfo?.screen?.fundName
                return cell ?? UITableViewCell()
            case 1:
                let cell = tableView.dequeueReusableCell(withIdentifier: RiskTableViewCell.identifier, for: indexPath) as? RiskTableViewCell
                cell?.whatIs.text = investInfo?.screen?.whatIs
                cell?.descript.text = investInfo?.screen?.definition
                cell?.risk.text = investInfo?.screen?.riskTitle
                return cell ?? UITableViewCell()
            case 2:
                let cell = tableView.dequeueReusableCell(withIdentifier: ReturnTableViewCell.identifier, for: indexPath) as? ReturnTableViewCell
                cell?.headerLbl.text = investInfo?.screen?.infoTitle
                cell?.fundLbl.text = "Fundo"
                cell?.cdiLbl.text = "CDI"
                cell?.monthView!.intervalo.text = "No mÃªs"
                cell?.yearView!.intervalo.text = "No ano"
                cell?.twelveView!.intervalo.text = "12 meses"
                
                cell?.monthView!.fundReturn.text = (investInfo?.screen?.moreInfo?.month?.fund)!.toString+"%"
                cell?.yearView!.fundReturn.text = (investInfo?.screen?.moreInfo?.year?.fund)!.toString+"%"
                cell?.twelveView!.fundReturn.text =  (investInfo?.screen?.moreInfo?.twelveMonth?.fund)!.toString+"%"
                
                cell?.monthView!.cdiReturn.text = (investInfo?.screen?.moreInfo?.month?.CDI)!.toString+"%"
                cell?.yearView!.cdiReturn.text = (investInfo?.screen?.moreInfo?.year?.CDI)!.toString+"%"
                cell?.twelveView!.cdiReturn.text =  (investInfo?.screen?.moreInfo?.twelveMonth?.CDI)!.toString+"%"
                
                return cell ?? UITableViewCell()
            case 3:
                let cell = tableView.dequeueReusableCell(withIdentifier: InvestInfoTableViewCell.identifier, for: indexPath) as? InvestInfoTableViewCell
                
                cell?.title.text = investInfo?.screen?.info![0].name
                cell?.infoDettail.text = investInfo?.screen?.info![0].data
                return cell ?? UITableViewCell()
            case 4:
                let cell = tableView.dequeueReusableCell(withIdentifier: InvestInfoTableViewCell.identifier, for: indexPath) as? InvestInfoTableViewCell
                cell?.title.text = investInfo?.screen?.info![1].name
                cell?.infoDettail.text = investInfo?.screen?.info![1].data
                return cell ?? UITableViewCell()
            case 5:
                let cell = tableView.dequeueReusableCell(withIdentifier: InvestInfoTableViewCell.identifier, for: indexPath) as? InvestInfoTableViewCell
                cell?.title.text = investInfo?.screen?.info![2].name
                cell?.infoDettail.text = investInfo?.screen?.info![2].data
                return cell ?? UITableViewCell()
            case 6:
                let cell = tableView.dequeueReusableCell(withIdentifier: InvestInfoTableViewCell.identifier, for: indexPath) as? InvestInfoTableViewCell
                cell?.title.text = investInfo?.screen?.info![3].name
                cell?.infoDettail.text = investInfo?.screen?.info![3].data
                return cell ?? UITableViewCell()
            case 7:
                let cell = tableView.dequeueReusableCell(withIdentifier: InvestInfoTableViewCell.identifier, for: indexPath) as? InvestInfoTableViewCell
                cell?.title.text = investInfo?.screen?.info![4].name
                cell?.infoDettail.text = investInfo?.screen?.info![4].data
                return cell ?? UITableViewCell()
            case 8:
                let cell = tableView.dequeueReusableCell(withIdentifier: InvestInfoTableViewCell.identifier, for: indexPath) as? InvestInfoTableViewCell
                cell?.title.text = investInfo?.screen?.info![5].name
                cell?.infoDettail.text = investInfo?.screen?.info![5].data
                return cell ?? UITableViewCell()
            case 9:
                let cell = tableView.dequeueReusableCell(withIdentifier: InvestInfoTableViewCell.identifier, for: indexPath) as? InvestInfoTableViewCell
                cell?.title.text = investInfo?.screen?.info![6].name
                cell?.infoDettail.text = investInfo?.screen?.info![6].data
                return cell ?? UITableViewCell()
            case 10:
                let cell = tableView.dequeueReusableCell(withIdentifier: InvestMoreInfoTableViewCell.identifier, for: indexPath) as? InvestMoreInfoTableViewCell
                cell?.title.text = investInfo?.screen?.downInfo![0].name
                cell?.downLoadImg.addTarget(self, action: #selector(openSafari), for: .touchUpInside)
                return cell ?? UITableViewCell()
            case 11:
                let cell = tableView.dequeueReusableCell(withIdentifier: InvestMoreInfoTableViewCell.identifier, for: indexPath) as? InvestMoreInfoTableViewCell
                cell?.title.text = investInfo?.screen?.downInfo![1].name
                 cell?.downLoadImg.addTarget(self, action: #selector(openSafari), for: .touchUpInside)
                return cell ?? UITableViewCell()
            case 12:
                let cell = tableView.dequeueReusableCell(withIdentifier: InvestMoreInfoTableViewCell.identifier, for: indexPath) as? InvestMoreInfoTableViewCell
                cell?.title.text = investInfo?.screen?.downInfo![2].name
                 cell?.downLoadImg.addTarget(self, action: #selector(openSafari), for: .touchUpInside)
                return cell ?? UITableViewCell()
            case 13:
                let cell = tableView.dequeueReusableCell(withIdentifier: InvestMoreInfoTableViewCell.identifier, for: indexPath) as? InvestMoreInfoTableViewCell
                cell?.title.text = investInfo?.screen?.downInfo![3].name
                 cell?.downLoadImg.addTarget(self, action: #selector(openSafari), for: .touchUpInside)
                return cell ?? UITableViewCell()
            case 14:
                let cell = tableView.dequeueReusableCell(withIdentifier: InvestMoreInfoTableViewCell.identifier, for: indexPath) as? InvestMoreInfoTableViewCell
                cell?.title.text = investInfo?.screen?.downInfo![4].name
                 cell?.downLoadImg.addTarget(self, action: #selector(openSafari), for: .touchUpInside)
                return cell ?? UITableViewCell()
            case 15:
                let cell = tableView.dequeueReusableCell(withIdentifier: InvestBtnTableViewCell.identifier, for: indexPath) as? InvestBtnTableViewCell
                return cell ?? UITableViewCell()
            default:
                break
            }
        }
        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        
        switch indexPath.row{
        case 0:
            return 120
        case 1:
            return 200
        case 2:
            return 170
        case 16:
            return 100
        default:
            return 30
        }
    }
}


