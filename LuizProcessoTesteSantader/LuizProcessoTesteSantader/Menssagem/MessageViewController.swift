//
//  MessageViewController.swift
//  LuizProcessoTesteSantader
//
//  Created by Luiz Otavio Processo on 28/09/19.
//  Copyright (c) 2019 Luiz Otavio Processo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MessageDisplayLogic: class{
  func displaySomething(viewModel: Message.Something.ViewModel)
}

class MessageViewController: UIViewController, MessageDisplayLogic{
  var interactor: MessageBusinessLogic?
  var router: (NSObjectProtocol & MessageRoutingLogic & MessageDataPassing)?
    var messageView:MessageView?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder){
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup(){
    let viewController = self
    self.title = "Contato"
    let interactor = MessageInteractor()
    let presenter = MessagePresenter()
    let router = MessageRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
    @objc func routingToForm(){
        router?.routeToForm()
    }
    @objc func routingToInvest(){
           router?.routeToInvest()
       }
  
  // MARK: View lifecycle
  
  override func viewDidLoad(){
    super.viewDidLoad()
    messageView = MessageView(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: self.view.frame.height))
    self.view = messageView
    
    messageView?.newMsgBtn.addTarget(self, action: #selector(routingToForm), for: .touchUpInside)
    messageView?.investBtn.addTarget(self, action: #selector(routingToInvest), for: .touchUpInside)
    
    navigationItem.leftBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: self, action: nil)
    doSomething()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething(){
    let request = Message.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: Message.Something.ViewModel){
    //nameTextField.text = viewModel.name
  }
}
