//
//  FormWorkerTests.swift
//  TesteiOS
//
//  Created by lucas.eiji.saito on 22/05/18.
//  Copyright (c) 2018 Accenture. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TesteiOS
import XCTest

class FormWorkerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: FormWorker!
    static var testCells: [Cell]!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupFormWorker()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupFormWorker()
  {
    sut = FormWorker()
    
    FormWorkerTests.testCells = []
  }
  
  // MARK: Test doubles
    class FormWorkerSpy: FormWorker
    {
        // MARK: Method call expectations
        var fetchCellsCalled = false
        
        // MARK: Spied methods
        override func fetchCells(completionHandler: @escaping ([Cell]) -> Void)
        {
            fetchCellsCalled = true
            DispatchQueue.main.asyncAfter(deadline: .now() + .seconds(1)) {
                completionHandler(FormWorkerTests.testCells)
            }
        }
    }
  
  // MARK: Tests
    func testFetchCellsShouldReturnListOfCells()
    {
        // Given
        let formWorkerSpy = FormWorkerSpy()
        sut = formWorkerSpy
        
        // When
        var fetchedCells = [Cell]()
        let expect = expectation(description: "Wait for fetched cells result")
        sut.fetchCells { (cells: [Cell]) -> Void in
            fetchedCells = cells
            expect.fulfill()
        }
        waitForExpectations(timeout: 1.1)
        
        // Then
        XCTAssert(formWorkerSpy.fetchCellsCalled, "Calling fetchCells() should ask the data store for a list of cells")
        XCTAssertEqual(fetchedCells.count, FormWorkerTests.testCells.count, "fetchCells() should return a list of cells")
        for cell in fetchedCells {
            XCTAssert(FormWorkerTests.testCells.contains(where: {$0.id == cell.id}), "Fetched cells should match the cells in the data store")
        }
    }
}
