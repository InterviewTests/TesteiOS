//
//  ContactViewController.swift
//  TesteiOS
//
//  Created by Brendoon Ryos on 21/02/19.
//  Copyright (c) 2019 Brendoon Ryos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ContactDisplayLogic: class {
  func displayForm(viewModel: Contact.Form.ViewModel)
  func displayErrorMessage(viewModel: Contact.Form.ViewModel)
  func displaySuccessMessage(viewModel: Contact.Send.ViewModel)
}

class ContactViewController: UIViewController {
  var interactor: ContactBusinessLogic?
  var router: (NSObjectProtocol & ContactRoutingLogic & ContactDataPassing)?
  
  let contactView = ContactView()

  // MARK: Object lifecycle
  init() {
    super.init(nibName: .none, bundle: .none)
    title = "Contato"
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  private func setup() {
    let viewController = self
    let interactor = ContactInteractor()
    let presenter = ContactPresenter()
    let router = ContactRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: View lifecycle
  override func viewDidLoad() {
    super.viewDidLoad()
    setupView()
    fetchForm()
  }
  
  override func loadView() {
    view = contactView
  }
  
  func setupView() {
    let tapGeture = UITapGestureRecognizer(target: self, action: #selector(hideKeyboard))
    view.addGestureRecognizer(tapGeture)
    contactView.tableView.setSendHandler(sendButtonPressed)
  }
  
  @objc func hideKeyboard() {
    view.endEditing(true)
  }
  
  func sendButtonPressed(_ values: [Value]) {
    print(values)
    let request = Contact.Send.Request(values: values)
    interactor?.sendFormData(request: request)
  }
  
  // MARK: Fetch Form
  func fetchForm() {
    let request = Contact.Form.Request()
    interactor?.fetchForm(request: request)
    contactView.activityIndicator.startAnimating()
  }
}

extension ContactViewController: ContactDisplayLogic {
  func displayForm(viewModel: Contact.Form.ViewModel) {
    contactView.activityIndicator.stopAnimating()
    contactView.tableView.update(with: viewModel.cells)
  }
  
  func displaySuccessMessage(viewModel: Contact.Send.ViewModel) {
    contactView.showFeedbackView()
    contactView.tableView.reloadData()
  }
  
  func displayErrorMessage(viewModel: Contact.Form.ViewModel) {
    
    contactView.activityIndicator.stopAnimating()
  }
}
