//
//  ContactViewController.swift
//  TesteiOS
//
//  Created by Tiago Leme on 28/07/18.
//  Copyright (c) 2018 Tiago Leme. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ContactDisplayLogic: class
{
  func displayDynamicCells(viewModel: Contact.FetchDynamicCells.ViewModel)
}

class ContactViewController: UIViewController, ContactDisplayLogic
{
  var interactor: ContactBusinessLogic?
  var router: (NSObjectProtocol & ContactRoutingLogic & ContactDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ContactInteractor()
    let presenter = ContactPresenter()
    let router = ContactRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
    
    var displayableCells: [Contact.FetchDynamicCells.ViewModel.DisplayableCell] = []
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    fetchComponentCells()
    
    self.tableView.delegate = self
    self.tableView.dataSource = self
  }
  
  // MARK: Do something
  
    @IBOutlet weak var tableView: UITableView!
    
  
  func fetchComponentCells() {
    let request = Contact.FetchDynamicCells.Request()
    interactor?.fetchCellInfo(request: request)
    print("From View Controller: Getting cells.")
  }
  
    func displayDynamicCells(viewModel: Contact.FetchDynamicCells.ViewModel) {
        self.displayableCells = viewModel.displayableCells
        self.tableView.reloadData()
    }
}

extension ContactViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.displayableCells.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = self.displayableCells[indexPath.row]

        switch cell.type {
            case 1:
                let tableViewCell = self.tableView.dequeueReusableCell(withIdentifier: "field") as! FieldTableViewCell
                tableViewCell.setCell(cell: cell)
                return tableViewCell
            //case 3:
                //identifier = "image"
            case 4:
                let tableViewCell = self.tableView.dequeueReusableCell(withIdentifier: "checkbox") as! CheckboxTableViewCell
                tableViewCell.setCell(cell: cell)
                return tableViewCell
            case 5:
                let tableViewCell = self.tableView.dequeueReusableCell(withIdentifier: "send") as! SendTableViewCell
                tableViewCell.setCell(cell: cell)
                return tableViewCell
            default:
                let tableViewCell = self.tableView.dequeueReusableCell(withIdentifier: "text") as! TextTableViewCell
                tableViewCell.setCell(cell: cell)
                return tableViewCell
        }
        
        
    }
    
}
