//
//  ContactViewController.swift
//  TesteiOS
//
//  Created by Tiago Leme on 28/07/18.
//  Copyright (c) 2018 Tiago Leme. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ContactDisplayLogic: class
{
  func displayDynamicCells(viewModel: Contact.FetchDynamicCells.ViewModel)
}

class ContactViewController: UIViewController, ContactDisplayLogic
{
  var interactor: ContactBusinessLogic?
  var router: (NSObjectProtocol & ContactRoutingLogic & ContactDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ContactInteractor()
    let presenter = ContactPresenter()
    let router = ContactRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle

    //MARK: - Class Variables
    var displayableCells: [Contact.FetchDynamicCells.ViewModel.DisplayableCell] = []

    //MARK: - Outlets
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet var successView: UIView!
    
    //MARK: - Actions
    @IBAction func newMessagePressed(_ sender: UIButton) {
        self.successView.removeFromSuperview()
    }
    
    //MARK: - View Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        self.fetchComponentCells()
        
        self.tableView.delegate = self
        self.tableView.dataSource = self
    }
    
    //MARK: Call Interactor do fetch cells
    func fetchComponentCells() {
        let request = Contact.FetchDynamicCells.Request()
        interactor?.fetchCellInfo(request: request)
    }
  
    //MARK: Presenter calls this function to display cells
    func displayDynamicCells(viewModel: Contact.FetchDynamicCells.ViewModel) {
        self.displayableCells = viewModel.displayableCells
        self.tableView.reloadData()
    }
}

//MARK: - Checkbox Delegate
extension ContactViewController: CheckboxCellDelegate {
    func showElementWith(id: Int) {
        for index in 0..<self.displayableCells.count {
            if self.displayableCells[index].id == id {
                self.displayableCells[index].hidden = self.displayableCells[index].hidden ? false : true
                self.tableView.reloadData()
            }
        }
    }
}

//MARK: - Send Button Delegate
extension ContactViewController: SendCellDelegate {
    func sendButtonPressed() {
        var isValid = true
        
        for index in 0..<self.displayableCells.count {
            if !self.displayableCells[index].hidden, let cell = self.tableView.cellForRow(at: IndexPath(row: index, section: 0)) as? FieldTableViewCell {
                if cell.textfield.isValid == false {
                    isValid = cell.textfield.isValid
                }
            }
        }
        
        if isValid {
            self.successView.frame = self.view.frame
            for index in 0..<self.displayableCells.count {
                if let cell = self.tableView.cellForRow(at: IndexPath(row: index, section: 0)) as? FieldTableViewCell {
                    cell.textfield.clearClicked()
                }
            }
            self.view.addSubview(self.successView)
            self.view.endEditing(true)
        }
    }
}

//MARK: - Table View Delegates
extension ContactViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.displayableCells.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = self.displayableCells[indexPath.row]

        switch cell.type {
            case 1:
                let tableViewCell = self.tableView.dequeueReusableCell(withIdentifier: "field") as! FieldTableViewCell
                tableViewCell.setCell(cell: cell)
                tableViewCell.textfield.tag = indexPath.row
                tableViewCell.textfield.delegate = self
                return tableViewCell
            //case 3:
                //identifier = "image"
            case 4:
                let tableViewCell = self.tableView.dequeueReusableCell(withIdentifier: "checkbox") as! CheckboxTableViewCell
                tableViewCell.setCell(cell: cell)
                tableViewCell.delegate = self
                return tableViewCell
            case 5:
                let tableViewCell = self.tableView.dequeueReusableCell(withIdentifier: "send") as! SendTableViewCell
                tableViewCell.setCell(cell: cell)
                tableViewCell.delegate = self
                return tableViewCell
            default:
                let tableViewCell = self.tableView.dequeueReusableCell(withIdentifier: "text") as! TextTableViewCell
                tableViewCell.setCell(cell: cell)
                return tableViewCell
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let cell = self.displayableCells[indexPath.row]
        if cell.hidden {
            return 0
        }
        return UITableViewAutomaticDimension
    }
}

//MARK: - Textfield Delegate functions
extension ContactViewController: UITextFieldDelegate {
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        
        let row = textField.tag
        for index in row..<self.displayableCells.count {
            if let cell = self.tableView.cellForRow(at: IndexPath(row: index + 1, section: 0)) as? FieldTableViewCell {
                if !self.displayableCells[index + 1].hidden {
                    cell.textfield.becomeFirstResponder()
                    return false
                }
            }
        }
        textField.resignFirstResponder()
        return true
    }
}
