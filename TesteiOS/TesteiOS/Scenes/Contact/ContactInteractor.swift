//
//  ContactInteractor.swift
//  TesteiOS
//
//  Created by Brendoon Ryos on 21/02/19.
//  Copyright (c) 2019 Brendoon Ryos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ContactBusinessLogic {
  func fetchForm(request: Contact.Form.Request)
  func sendFormData(request: Contact.Send.Request)
}

protocol ContactDataStore {
  //var name: String { get set }
}

class ContactInteractor: ContactBusinessLogic, ContactDataStore {
  var presenter: ContactPresentationLogic?
  var worker: ContactWorker?
  //var name: String = ""
  
  init(worker: ContactWorker? = ContactWorker()) {
    self.worker = worker
  }
  
  // MARK: Fetch Form
  func fetchForm(request: Contact.Form.Request) {
    worker?.fetchForm(request: request, completion: { result in
      switch result {
      case .success(let data):
        let response = Contact.Form.Response(cells: data.cells)
        self.presenter?.presentForm(response: response)
      case .failure(let error):
        let response = Contact.Form.Response(error: error)
        self.presenter?.presentErrorMessage(response: response)
      }
    })
  }
  
  // MARK: Send form data
  func sendFormData(request: Contact.Send.Request) {
    let response = Contact.Send.Response()
    presenter?.presentSuccesseMessage(response: response)
    // TODO: Send form data
  }
}
