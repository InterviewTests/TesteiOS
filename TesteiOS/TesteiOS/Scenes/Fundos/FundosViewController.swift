//
//  FundosViewController.swift
//  TesteiOS
//
//  Created by lucas.eiji.saito on 28/06/18.
//  Copyright (c) 2018 Accenture. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FundosDisplayLogic: class
{
  func displayFundScreen(viewModel: Fundos.Something.ViewModel)
}

class FundosViewController: UIViewController, FundosDisplayLogic
{
  var interactor: FundosBusinessLogic?
  var router: (NSObjectProtocol & FundosRoutingLogic & FundosDataPassing)?
    var riskList: [RiskCellCollectionViewCell.ViewModel] = []

    @IBOutlet var contentView: UIView!
    @IBOutlet weak var labelTitle: UILabel!
    @IBOutlet weak var labelFundName: UILabel!
    @IBOutlet weak var labelWhatIs: UILabel!
    @IBOutlet weak var labelDefinition: UILabel!
    @IBOutlet weak var labelRiskTitle: UILabel!
    @IBOutlet weak var collectionViewRisk: UICollectionView!
    @IBOutlet weak var labelInfoTitle: UILabel!
    @IBOutlet weak var labelMoreInfoMonthFund: UILabel!
    @IBOutlet weak var labelMoreInfoMonthCDI: UILabel!
    @IBOutlet weak var labelMoreInfoYearFund: UILabel!
    @IBOutlet weak var labelMoreInfoYearCDI: UILabel!
    @IBOutlet weak var labelMoreInfo12monthsFund: UILabel!
    @IBOutlet weak var labelMoreInfo12monthsCDI: UILabel!
    // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = FundosInteractor()
    let presenter = FundosPresenter()
    let router = FundosRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    configCollectionViewRisk()
    doSomething()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = Fundos.Something.Request()
    interactor?.fetchFund(request: request)
  }
    
    func configCollectionViewRisk() {
        collectionViewRisk.register(UINib(nibName: "RiskCellCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "RiskCellCollectionViewCell")
    }
  
  func displayFundScreen(viewModel: Fundos.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
    //print(viewModel)
    labelTitle.text = viewModel.fundScreen.title
    labelFundName.text = viewModel.fundScreen.fundName
    labelWhatIs.text = viewModel.fundScreen.whatIs
    labelDefinition.text = viewModel.fundScreen.definition
    labelRiskTitle.text = viewModel.fundScreen.riskTitle
    riskList = viewModel.riskCollectionModels
    collectionViewRisk.reloadData()
    labelInfoTitle.text = viewModel.fundScreen.infoTitle
    labelMoreInfoMonthFund.text = viewModel.fundScreen.moreInfoMonthFund
    labelMoreInfoMonthCDI.text = viewModel.fundScreen.moreInfoMonthCDI
    labelMoreInfoYearFund.text = viewModel.fundScreen.moreInfoYearFund
    labelMoreInfoYearCDI.text = viewModel.fundScreen.moreInfoYearCDI
    labelMoreInfo12monthsFund.text = viewModel.fundScreen.moreInfo12monthsFund
    labelMoreInfo12monthsCDI.text = viewModel.fundScreen.moreInfo12monthsCDI
  }
}

extension FundosViewController: UICollectionViewDelegateFlowLayout {
    //atualiza a largura da collection de risk quando altera a largura da view (rotaciona o device)
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        collectionViewRisk.collectionViewLayout.invalidateLayout()
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: collectionView.frame.size.width / CGFloat(riskList.count), height: collectionView.frame.size.height)
    }
}

extension FundosViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return riskList.count
    }
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "RiskCellCollectionViewCell", for: indexPath) as? RiskCellCollectionViewCell
        
        cell?.viewModel = riskList[indexPath.row]
        
        return cell ?? UICollectionViewCell()
    }
}
