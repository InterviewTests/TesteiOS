//
//  FundosViewController.swift
//  TesteiOS
//
//  Created by lucas.eiji.saito on 28/06/18.
//  Copyright (c) 2018 Accenture. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FundosDisplayLogic: class
{
  func displayFundScreen(viewModel: Fundos.Something.ViewModel)
}

class FundosViewController: UIViewController, FundosDisplayLogic
{
  var interactor: FundosBusinessLogic?
  var router: (NSObjectProtocol & FundosRoutingLogic & FundosDataPassing)?
    
    var viewModelFudosTop: Fundos.Something.ViewModel.FundScreenTop = Fundos.Something.ViewModel.FundScreenTop()
    var infoCells: [Fundos.InfoCell] = []

    @IBOutlet var contentView: UIView!
    @IBOutlet weak var tableView: UITableView!
    
    // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = FundosInteractor()
    let presenter = FundosPresenter()
    let router = FundosRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    configTableViewCells()
    doSomething()
  }
    
    func configTableViewCells() {
        tableView.register(UINib(nibName: "FundosTopTableViewCell", bundle: nil), forCellReuseIdentifier: "FundosTopTableViewCell")
        tableView.register(UINib(nibName: "FundosInfoTableViewCell", bundle: nil), forCellReuseIdentifier: "FundosInfoTableViewCell")
        tableView.register(UINib(nibName: "FundosButtonTableViewCell", bundle: nil), forCellReuseIdentifier: "FundosButtonTableViewCell")
        tableView.separatorStyle = UITableViewCellSeparatorStyle.none
    }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = Fundos.Something.Request()
    interactor?.fetchFund(request: request)
  }
  
  func displayFundScreen(viewModel: Fundos.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
    //print(viewModel)
    self.viewModelFudosTop = viewModel.fundScreenTop
    self.infoCells = viewModel.infoCells
    tableView.reloadData()
  }
    
    //atualiza a largura da collection de risk quando altera a largura da view (rotaciona o device)
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        tableView.reloadData()
    }
}

// MARK: TableView Delegate
extension FundosViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, shouldHighlightRowAt indexPath: IndexPath) -> Bool {
        return false
    }
    
    func tableView(_ tableView: UITableView, canFocusRowAt indexPath: IndexPath) -> Bool {
        return false
    }
}

// MARK: TableView DataSource
extension FundosViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 3
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        var numRows:Int = 0
        
        if (section == 0) {
            numRows = 1
        } else if (section == 1) {
            numRows = infoCells.count
        } else if (section == 2) {
            numRows = 1
        }
        
        return numRows
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        var cell: UITableViewCell?
        
        if (indexPath.section == 0) {
            let cellFundosTop = tableView.dequeueReusableCell(withIdentifier: "FundosTopTableViewCell", for: indexPath) as? FundosTopTableViewCell
            cellFundosTop?.viewModel = self.viewModelFudosTop
            cell = cellFundosTop
        } else if (indexPath.section == 1) {
            let cellInfoCell = tableView.dequeueReusableCell(withIdentifier: "FundosInfoTableViewCell", for: indexPath) as? FundosInfoTableViewCell
            cellInfoCell?.viewModel = infoCells[indexPath.row]
            cellInfoCell?.delegate = self;
            cell = cellInfoCell
        } else if (indexPath.section == 2) {
            let cellButton = tableView.dequeueReusableCell(withIdentifier: "FundosButtonTableViewCell", for: indexPath) as? FundosButtonTableViewCell
            cell = cellButton
        }
        
        return cell ?? UITableViewCell()
    }
}

extension FundosViewController: OpenSafariViewControllerProtocol {
    func openSafariViewController(controller: UIViewController) {
        self.present(controller, animated: true) { () -> Void in
            
        };
    }
}
