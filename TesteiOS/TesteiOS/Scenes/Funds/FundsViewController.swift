//
//  FundsViewController.swift
//  TesteiOS
//
//  Created by Brendoon Ryos on 21/02/19.
//  Copyright (c) 2019 Brendoon Ryos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FundsDisplayLogic: class {
  func displayFund(viewModel: Funds.Get.ViewModel)
  func displayDownloadedData(viewModel: Funds.Download.ViewModel)
  func displayErrorMessage(viewModel: Funds.Get.ViewModel)
}

class FundsViewController: UIViewController {
  var interactor: FundsBusinessLogic?
  var router: (NSObjectProtocol & FundsRoutingLogic & FundsDataPassing)?
  
  let fundsView = FundsView()

  // MARK: Object lifecycle
  init() {
    super.init(nibName: .none, bundle: .none)
    title = "Investimento"
    navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "share"), style: .plain, target: .none, action: .none)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  private func setup() {
    let viewController = self
    let interactor = FundsInteractor()
    let presenter = FundsPresenter()
    let router = FundsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: View lifecycle
  override func viewDidLoad() {
    super.viewDidLoad()
    setupView()
    fetchFund()
  }
  
  override func loadView() {
    view = fundsView
  }
  
  func setupView() {
    fundsView.tableView.setInvestHandler(investButtonPressed)
    fundsView.tableView.setDownloadHandler(downloadButtonPressed)
  }
  
  func investButtonPressed() {
    // TODO: Invest Button pressed action
    print("Investir")
  }
  
  func downloadButtonPressed(_ url: String?) {
    let request = Funds.Download.Request(url: url)
    interactor?.downloadData(request: request)
  }
  
  // MARK: Fetch Fund
  func fetchFund() {
    let request = Funds.Get.Request()
    interactor?.fetchFund(request: request)
    fundsView.activityIndicator.startAnimating()
  }
}

extension FundsViewController: FundsDisplayLogic {
  func displayFund(viewModel: Funds.Get.ViewModel) {
    fundsView.tableView.update(with: viewModel.fund!)
    fundsView.activityIndicator.stopAnimating()
  }
  
  func displayDownloadedData(viewModel: Funds.Download.ViewModel) {
    router?.routeToDownloadData()
  }
  
  func displayErrorMessage(viewModel: Funds.Get.ViewModel) {
    fundsView.activityIndicator.stopAnimating()
  }
}
